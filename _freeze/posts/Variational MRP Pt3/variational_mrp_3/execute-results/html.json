{
  "hash": "fe77f7289950b75999186201f7f930c1",
  "result": {
    "markdown": "---\nlayout: post\ntitle: Variational Inference for MRP with Reliable Posterior Distributions\nsubtitle: Part 3- Some theory on why VI is hard\ndate: 2022-12-03\ndraft: True\ncategories:\n- MRP\n- Variational Inference\n---\n\n\nThis is section 3 in my series on using Variational Inference to speed up relatively complex Bayesian models like Multilevel Regression and Poststratification without the approximation being of disastrously poor quality.\n\nIn the [last post](https://andytimm.github.io/posts/Variational%20MRP%20Pt2/Variational_MRP_pt2.html) we threw caution to the wind, and tried out some simple variational inference implementations, to build up some intuition about what bad VI might look like. Just pulling a simple variational inference implementation off the shelf and whacking run perhaps unsurprisingly produced dubious models, so in this post we'll bring in long overdue theory to understand why VI is so difficult, and what we can do about it.\n\nThe general structure for this post will be to describe a problem with VI, and then describe how that problem can be fixed to some degree. I also have a grab bag of other interesting ideas from the literature I think are cool, but maybe not as important or interesting to me as the 3 below at the end.\n\nThe rough plan for the series is as follows:\n\n1.  Introducing the Problem- Why is VI useful, why VI can produce spherical cows\n2.  How far does iteration on classic VI algorithms like mean-field and full-rank get us?\n3.  **(This post)** Some theory on why posterior approximation with VI can be so poor\n4.  Better grounded diagnostics and workflow\n5.  Seeing if some more sophisticated techniques like normalizing flows help\n\nDraft problems/solutions:\n\n# Inclusive versus Exclusive KL-divergence\n\nLike I mentioned in the first post in the series, the Evidence Lower Bound (ELBO), our optimization objective we're working with is a tractable approximation of the Kullback-Leibler Divergence between our choice of approximating distribution $q(z)$ to our true posterior $p(z)$.\n\nThe KL divergence is asymmetric: in general, $KL(p||q) \\neq KL(q||p)$. Previously,\nwe saw that this asymmetry mattered quite a bit for our ELBO idea:\n\n$$argmin_{q(z) \\in \\mathscr{Q}}(q(z)||\\frac{p(z,x)}{\\bf p(x)}) = \\mathbb{E}[logq(z)] - \\mathbb{E}[logp(z,x)] + {\\bf logp(x)}$$\nWe can't calculate the bolded term $logp(x)$; if we could we wouldn't be finding\nthis inference thing so hard in the first place. The way we sidestepped that with\nthe ELBO is to note that the term is constant with respect to $q$; so we can\ngo on our merry way minimizing the above without it.\n\nIf we flip the divergence around though, we've got an issue. That term would\nthen be a $logq(x)$ ... which we can't write off in the same way- it varies as we\noptimize. So if we're\ndoing this ELBO minimizing version of variational inference, we're obligated to\nuse this \"reverse\" KL divergence, the second option below. \n\n\n$$\n\\begin{align}\nKL(p||q) = \\sum_{x \\in X}{p(x)}log[\\frac{p(x)}{q(x)}]  \\\\\nKL(q||p) = \\sum_{x \\in X}{q(x)}log[\\frac{q(x)}{p(x)}] \n\\end{align}\n$$\n\nUnfortunately, this choice to optimize the \"reverse\" KL divergence bakes in preference\nfor a certain type of solution[^1]. \n\nI found I built better intuition for this encoded preference after seeing it presented many\ndifferent ways, so here are a few of my favorites.\n\nOne way to see the difference is through a variety of labels for each direction. One could call Forward KL (1) vs. Reverse KL (2):\n\n1. Inclusive vs. Exclusive (my favorite, and so what I'm using for the section header)\n2. Mean Seeking vs. Mode Seeking\n3. Zero Avoiding vs. Zero Forcing\n\nlet's quickly illustrate this in the case of a simple mixture of normals:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(tidyverse)\n\nmixture <- data.frame(normals = c(rnorm(1000,3,1),rnorm(1000,15,2)),\n                      mode_seeking_kl = rnorm(2000,3.5,2),\n                      mean_seeking_kl = rnorm(2000,9,4))\n\nrkl_plot <- mixture %>% ggplot(aes(x = normals)) +\n  geom_density(aes(x = normals), color = \"red\") +\n  geom_density(aes(x = mode_seeking_kl), color = \"green\") + ggtitle(\"Exclusive KL\") +\n  xlab(\"\")\n\nfkl_plot <- mixture %>% ggplot(aes(x = normals)) +\n  geom_density(aes(x = normals), color = \"red\") +\n  geom_density(aes(x = mean_seeking_kl), color = \"green\") + ggtitle(\"Inclusive KL\") +\n  xlab(\"\")\n\ngrid.arrange(rkl_plot,fkl_plot)\n```\n\n::: {.cell-output-display}\n![](variational_mrp_3_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nTo approximate the same exact red distribution $p(x)$, Inclusive KL (1) and Exclusive KL (2)\noptmize the green $q(p)$ in quite different manner. \n\nTo spell out the ways to describe this above: Inclusive KL will try to cover all the probability mass in $p(x)$, even if it means a peak\nat a unfortunate middle ground. Exclusive KL, on the other hand, will try to concentrate\nit's mass on the largest mode, even if it means missing much of the mixture of normals. Alternatively,\nwe could describe the top graph as mode seeking, and the bottom as mean seeking. Finally,\nwe could say the top graph shows \"Zero Forcing\" behavior- it will heavily favor\nputting zero mass on some parts of the graph to avoid any weight where $p(x)$ has no\nmass, even if it means missing an entire mode. Conversely, Inclusive KL will\naim to cover all the mass of $p(x)$ in full even if the result is an odd solution, in order\nto avoid having zero mass where $p(x)$ has some.\n\nHow does this follow from the form of the divergence?\n\nTo start with, notice that for inclusive KL we could think of the $log(\\frac{p(x)}{q(x)})$ part of the term being weighted by $p(x)$- if in some range of $x$ $p(x)$ is 0, we don't pay a penalty if $q(x)$ puts mass. The reverse is not true however- if our $q(x)$ is zero where there should be mass\nin our true distribution, our Inclusive KL divergence is infinite[^2].\n\n$$\n\\begin{align}\nKL(p||q) = \\sum_{x \\in X}{p(x)}log[\\frac{p(x)}{q(x)}]  \\\\\nKL(q||p) = \\sum_{x \\in X}{q(x)}log[\\frac{q(x)}{p(x)}] \n\\end{align}\n$$\n\nAnd if we change the direction of the divergence, the opposite zeros and infinities\nshow up, enforcing strong preferences for a specific type of solution.\n\nWhen the example is a simple mix of two gaussians approximated with a single\ngaussian, it's fairly easy to intuit how the choice of KL divergence will influence\nthe optimization solution. This all gets a bit more opaque on harder problems-\nlike we saw with the example last post, ELBO based VI will tend to underestimate\nthe support of $p(x)$ but whether the solution is narrow but overall reasonable, or pretty much degenerate\nis hard to predict. However, this exploration of how the form of the divergence\ninfluences the results still gives a rough intuition for why our ELBO optimized\nposteriors might collapse.\n\nIf we want to try the opposite direction of KL divergence, it isn't immediately obvious there's a\nglobal objective we can choose to perhaps seek out a optimization problem\nthat favors overdispersed solutions. Like I mentioned above, if we try to make\nan ELBO-esque target but reverse the KL divergence, the $logp(x)$ which is constant with respect\nto the $q(x)$ we're optimizing becomes a $logq(x)$ which we can't so easily work around.\n\nLet's look first at a solution in the spirit of VI[^3] to the above problem which requires us to pick up a new divergence, the $\\chi^{2}$-divergence, and optimizes a new bound. Let's take a look at it.\n\n## $\\chi^{2}$ Variational Inference (CHIVI) and the CUBO bound\n\nThe $\\chi^{2}$-divergence has form:\n\n$$\nD_{\\chi^2}(p||q) = \\mathbb{E}_{q(z;\\lambda)}[(\\frac{p(z|x)}{q(z;\\lambda)})^2 -1]\n$$\nFor simplicity and comparability, I'm switching here to using Dieng et Al. (2017)'s notation here- they use $q(z;\\lambda)$ to refer to the variational family we're using, indexed by parameters $\\lambda$.\n\nThis divergence has the properties we wanted when we tried to use Inclusive KL Divergence- it tends to be mean seeking instead of mode seeking.\n\nLike with the ELBO, we need to show that we have a bound here independent of $logp(x)$, and that we have a way to estimate that bound efficiently.\n\nLet's first move around a few pieces of the first term above:\n\n$$\n\\begin{align}\n\\mathbb{E}_{q(z;\\lambda)}[(\\frac{p(z|x)}{q(z;\\lambda)})^2& = 1 + D_{\\chi^2}(p(z|x)|q(z;\\lambda)) \\\\\n&= p(x)^2[1 + D_{\\chi^2}(p(z|x)|q(z;\\lambda))]\n\\end{align}\n$$\nThen we can take the log of both the right hand side equations, which gives us:\n\n$$\n\\frac{1}{2}log(1 + D_{\\chi^2}(p(z|x)|q(z;\\lambda))) = -logp(x) + \\frac{1}{2}log\\mathbb{E}_{q(z;\\lambda)}[(\\frac{p(z|x)}{q(z;\\lambda)})^2]  \n$$\n...and this is starting to feel a lot like the ELBO derivation. Log is monotonic, and logp(x) is constant as we optimize $q$, so we've found something that we're close to able to minimize:\n\n$$\nCUBO_{2}(\\lambda) = \\frac{1}{2}log\\mathbb{E}_{q(z;\\lambda)}[(\\frac{p(z|x)}{q(z;\\lambda)})^2]\n$$\nSince this new divergence is non-negative as well, this is a upper bound of the model evidence. This is thus named $\\chi$ upper bound (CUBO)[^4].\n\n## ... But can we estimate it?\n\nOne other issue here: how do we estimate this? The CUBO objective got rid of the $logp(x)$ we were worried about, but it seems like that expectation is going to be difficult to estimate in general. \n\nIf you're a good Bayesian your first idea might be to Monte Carlo (not MCMC) estimate it roughly like this:\n\n$$\nCUBO_2(\\lambda) = \\frac{1}{2}log\\frac{1}{S}\\sum_{s=1}^{S}[(\\frac{p(x,z^{s})}{q(z^{s};\\lambda)})^2]\n$$\nUnfortunately, the $log$ transform here means our Monte Carlo estimator will be biased: we can see this by applying Jensen's inequality to the above. To make this stably act as an upper bound, we can apply a clever transformation:\n\n$$\n\\bf{L} = exp(n* CUBO_2(\\lambda))\n$$\n\nSince exp is monotonic, this has the same objective as the CUBO, but we can Monte Carlo estimate it unbiasedly. Is that the last problem to solve?\n\n## ... But can we calculate gradients efficiently?\n\nWait, wait no. Sorry to keep saying there's one more step here, but there's a lot that goes into making a full, convenient, general use algorithm here. The last step (for real this time) is that we need to figure out how to get gradients for the estimate of $\\bf{L}$ above, $\\bf{\\hat{L}}$. The issue is that we don't have any guarantee that a unbiased Monte Carlo estimator of $\\bf{\\hat{L}}$ gets us a Monte Carlo way to estimate $\\nabla_\\lambda\\bf{\\hat{L}}$- we can't guarantee that the gradient of the expectation is equal to the expectation of the gradient[^5].\n\nFor this, we need to pull out a trick from the variational autoencoder literature. This is usually referred to as the \"Reparameterization Trick\", but the original CHIVI paper refers to them as \"reparmeterization gradients\". We will assume we can rewrite the generative process of our model as $z = g(\\lambda,\\epsilon)$, where $\\epsilon \\sim p(\\epsilon)$ and g being a deterministic function. Then we have a new estimator for both $\\bf{\\hat{L}}$ and it's gradient:\n\n$$\n\\begin{align}\n\\bf{\\hat{L}} &= \\frac{1}{B}\\sum_{b=1}^B(\\frac{p(x,g(\\lambda,\\epsilon^{(b)}))}{q(g(\\lambda,\\epsilon^{(b)};\\lambda))})^{2} \\\\ \n\\nabla_\\lambda\\bf{\\hat{L}}  &= \\frac{2}{B}\\sum_{b=1}^B(\\frac{p(x,g(\\lambda,\\epsilon^{(b)}))}{q(g(\\lambda,\\epsilon^{(b)};\\lambda))})^2 \\nabla_\\lambda log(\\frac{p(x,g(\\lambda,\\epsilon^{(b)}))}{q(g(\\lambda,\\epsilon^{(b)};\\lambda))})\n\\end{align}\n$$\nThere are one or two more neat computational tricks in the paper I won't explain here (essentially: how do we extend this to work in minibatch fashion, and how do we avoid numerical underflow issues), but this is now essentially functional. The whole algorithm, which they dubbed CHIVI is below:\n\n![](images/CHIVI_algorithm.png)\n\nStepping back, let's talk about some practical properties of the algorithm we've been stepping through. \n\nFirst, and probably most exciting given what we saw in the last post, CHIVI's objective has the property that it is inclusive, unlike the ELBO we were using earlier. This won't be the right choice for all variational inference problems, but given our prior issues with very narrow posteriors this will be exciting to test[^6]. And as we'll see in the next section, this overdispersion tendency in the posterior will often have a beneficial interaction with importance sampling which can improve our estimates further.\n\nAnother nice thing here is that if we were to estimate both the ELBO and CUBO for a given problem, we'd get both a upper and lower bound on the model evidence. This is theoretically convenient in that we now have a sandwich estimator, which actually obtains reasonably tight bounds. We'll even be able use the fact we have both later to get some bounds on practical bounds on quantities we tend to report in practice like means and covariances!\n\nA final neat benefit here is that to the extent we are willing to consider ensembling models (again, more on that soon), this CHIVI framework will produce estimates that succeed (and fail) in less similar ways that the the ELBO based estimators we looked at last post. Expanding our available set of tools is always good, but it's even better when we're ensembling because we can leave more heavily on each model for the tasks it succeeds on.\n\nOne potential downside here is that we introduced a solution that partially relies on a Monte Carlo estimator. That said, this is pretty cheap in practice; if we're using VI as a drop in for MCMC, this is still going to be much much faster than MCMC for any big problem. We'll need to think about a reasonable number of samples in a given case, but realistically this isn't going to be a driving factor in determining compute time.\n\nAnother final problem is that the estimator we built out for the CUBO that we could actually estimate tends to end up having pretty high variance. Exponentiating the objective isn't free in that sense; but this problem of variance reduction in estimators is something that feels like a tractable problem to iterate on.\n\n# Not all samples are equally good\n\nSo we've made an approximation q(x) that's cheap to sample from, and is somewhat\nclose to p(x), our true posterior. The way to improve the approximation we've\nfocused on so far is to just go back to the start and make q(x) better; for example,\nthrough changing up the variational family, or to switching to a different\noptimization objective like the CUBO. That's one solution that's often necessary,\nbut can we work with a particular q(x) we have and somehow make it look more like\np(x)?\n\n... Phased this way, this sounds a lot like importance sampling. If you haven't seen them before,\nan importance sampling estimator allows us to take draws from a (preferably) easy to sample\nfrom distribution[^7] and reweight the samples to look more like our true target\ndistribution. The weight $w_i$ for each sample $i$ take form:\n\n$$\nw_i = \\frac{p(x_i)}{q(x_i)}\n$$\nBefore you get worried that we don't have $p(x_i)$ because of the normalizing constant like every time we talk about having $p(x)$ in this series, there's a clever estimator that\n\"self-normalizes\" such that this can be a reasonable strategy. Intuitively, we're\njust placing more weight on samples in the support of $p(x)$.\n\nThis footenote[^8] has a selection of some of my favorite resources for learning more or refreshing your memory about importance sampling, but for the main discussion let me pull out some\nparticularly important sub-problems to solve, which all take the forms of managing\nthe variance of the estimator since it's pretty easy to see it's unbiased. \n\nFirst, our choice of the \"proposal\" distribution we're reweighting to be more like\n$p(x)$ matters for making this process practically feasible. We need the proposal\ndistribution to be close enough to $p(x)$ that a realistic number of the draws\nget non-negligible weights.\nIt might be true that we could draw proposals from a big $N$ dimensional uniform\ndistribution for every problem, but if we want to be done sampling enough this century\nwe need to at least get fairly close with our initial $q(x)$.\n\nA second, but related problem is that it's quite common for the unmodified\nimportance sampling estimator to have some weights which are orders and orders\nof magnitude higher than the average weight, blowing up the variance of the estimator.\nDan Simpson's slides I linked above has an instructive example with not too\nweird $p(x)$ and $q(x)$'s that has a max weight ~1.4 million (!) times the average.\nIf that happens, our estimator will essentially ignore most samples without gigantic\nweights, and it'll take ages for that estimator to tell us anything remotely\nreliable. \n\nSo with those points we need to address, here are the next topics in this section:\n\n1. Importance Weighted Variational Inference\n2. Robust importance sampling with built in diagnostics via PSIS\n3. Combining multiple proposal distributions via Multiple Importance Sampling\n\n\n## Importance Weighted Variational Inference\n\nThe actual use of Importance Weighting for VI in it's simplest form is\npretty intuitive (draw samples from $q(x)$, weight them...), but let's derive the\nnew Importance Weighted Variational Inference (IWVI) estimator since some nice\nintuition will come with it.\n\nWe'll aim to show that we can get a tighter ELBO by using importance weights. This\ntype of tighter ELBO was first shown by [Burda et Al. (2015)](https://arxiv.org/abs/1509.00519)\nin the context of Variational Autoencoders after which is was fairly clear this could apply\nto variational inference, but [Domke and Sheldon (2018)](https://arxiv.org/abs/1808.09034)\nfleshed out some details of that extension- I'll be explaining some of their main\nresults first.\n\nTo start, imagine a random variable $R$, such that $\\mathbb{E}{R} = p(x)$, which\nwe'll think of as a estimator of p(x). Then by Jensen's Inequality:\n\n$$\nlogp(x) = \\mathbb{E}logR + \\mathbb{E}log\\frac{p(x)}{R}\n$$\n\nThe first term is the bound, which will be tighter if $R$ is highly concentrated. \n\nThis is a more general form of the ELBO; we can make it quite familiar looking by\nhaving our R above be:\n\n$$\nR = \\frac{p(z,x)}{q(z)}, z \\sim q\n$$\n\nThe reason pointing out this fairly simple generalization is helpful is that it\nframes how to tighten our ELBO bound on $logp(x)$ via alternative estimators $R$.\n\nBy drawing $M$ samples and averaging them as in importance sampling, we get:\n\n$$\nR_M = \\frac{1}{M}\\sum_{m=1}^{M}\\frac{p(z_m,x)}{q(z_m)}, z_m \\sim q\n$$\nFrom there, we can derive a tighter bound on $logp(x)$, referred to as the IW-ELBO:\n\n$$\nIW-ELBO_M[q(z)||p(z,x)] := \\mathbb{E}_{q(z_{1:M})}log\\frac{1}{M} \\sum_{m=1}^{M}\\frac{p(z_m,x)}{q(z_m)}\n$$\nWhere we're using the $1:M$ as a shorthand for eg $q(z_{1:M}) = q(z_1)...q(z_M)$.\n\n\nIt's worth noting that the last few lines don't specify a particular form of importance\nsampling- we're getting the tighter theoretical bounding behavior from the averaging of samples\nfrom $q$. We'll see a particularly good form of importance sampling with desirable\npractical properties in a moment.\n\n### How does IW-ELBO change the VI problem conceptually?\n\nThe tighter bound is nice, but importance sampling also has the side effect (done right, side benefit)\nof modifying our incentives in choosing a variational family. To see what I mean,\nwe can re-use the plots above for KL Divergence, where red was the true distribution,\nand green were our potential approximations. If we're not going to draw multiple samples and weight them, it makes sense to choose something like the first plot below. Every draw in the middle of the two target modes\nis expensive per our ELBO objective, so better to choose a mode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrkl_plot <- mixture %>% ggplot(aes(x = normals)) +\n  geom_density(aes(x = normals), color = \"red\") +\n  geom_density(aes(x = mode_seeking_kl), color = \"green\") + ggtitle(\"Without weighting, we prefer to capture a mode\") +\n  xlab(\"\")\n\nfkl_plot <- mixture %>% ggplot(aes(x = normals)) +\n  geom_density(aes(x = normals), color = \"red\") +\n  geom_density(aes(x = mean_seeking_kl), color = \"green\") + ggtitle(\"With importance sampling, weights allow us to prefer coverage\") +\n  xlab(\"\")\n\ngrid.arrange(rkl_plot,fkl_plot)\n```\n\n::: {.cell-output-display}\n![](variational_mrp_3_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nIf we can use importance samples though, quite the opposite is be true! Note that we're\nstill using the ELBO, a reverse-KL based metric- that hasn't changed. What has changed is our\nability to mitigate the objective costs of those samples between the two extremes.\nPoints outside the two target modes will get lower importance weights, and points within\nthe modes will get higher ones, so as long as we're covering the modes with some reasonable amount of probability mass, and drawing enough samples we can actually\ndo better with the distribution centered between the modes. \n\nWe can also imagine how varying the number of samples might effect the point\nfrom the last paragraph. Between $M=1$ and \"enough draws to get all the benefits of IS\",\nwe can imagine there's a slow transition from \"just stick with 1 mode\" and \"go with IS\".\nSo it seems like we should be worried about getting the number of samples right, but\nfortunately as we'll see in the next section there are great rules of thumb in\nsome variants of IS. We'll still need to bear the cost of sampling (which gets higher as $q(x)$ becomes \"further\" from $p(x)$, as we'll need more samples to weight into a good approximation), but\nthe cost of sampling for most VI implementations will often be pretty manageable\nif our proposal distribution is somewhat close to $p(x)$.\n\nAnother way to think about how importance sampling changes our task with variational\ninference is to think about what sorts of distributions make sense to have as\nour variational family, and even which objective might be better given IS. On choice\nof a variational family, if we're aiming for coverage, moving towards thicker-\ntailed distributions like t distributions makes a lot of sense. While we explored\nthe IW-ELBO above to build intuition, there's no reason not to apply VI to the CUBO\n and thus CHIVI- this also naturally produces nicely overdispersed distributions which can\n be importance sampled closer to the true $p(x)$. This idea of aiming for a\n wide proposal to sample from is referred to in the importance sampling literature (eg [Owen, 2013](https://artowen.su.domains/mc/)) As \"defensive sampling\", with [Domke and Sheldon (2018)](https://arxiv.org/abs/1808.09034) exploring the VI connection more fully. For intuition, by ensuring most of p(x) is covered by some reasonable mass makes it easier to efficiently\n get draws that can be weighted into a final posterior, even if the \"unweighted\"\n posterior might be too wide.\n\n## Solving our IS problems with Pareto-Smoothed Importance Sampling\n\n## Multiple Proposal Distributions with Multiple Importance Sampling\n\n# Can we bound error in terms of ELBO or CUBO?\n\n## Wasserstein Bounds\n\n# Conclusions + Bonus Context\n\n[^1]: In truth, both KL divergences encode structural preferences for the type\nof optimization solution they admit- neither will be the right choice for every\nproblem and  variational family combination. But as we'll see, being able to\nchoose will give us more options to fit models we believe.\n\n[^2]: This is the footnote for those of you that are annoyed because you tried\nto write out how this would happen, and got something like $p(x) log \\frac{p(x)}{0}$,\nwhich should be undefined if we're following normal math rules. But this is information\ntheory, and in this strange land we say $p(x) log \\frac{p(x)}{0} = \\infty$. I don't\nhave a strong intuition for why this is the best solution, but a information encoding perspective\nmakes it make more sense at least: if we know the distribution of $p$,\nwe can construct a code for it with average description length $H(x)$. One way to understand\nthe KL divergence is as what happens when we try to use the code for a distribution $q$ to describe $p$,\nwe'd need $H(p) + KL(p||q)$ bits on average to describe $p$. In the code for $q$ has no way to represent some element of $p$, then requiring... infinite bits feels like the right way to describe the breakdown of meaning? All this to say this condition is something our optimizer will try hard to avoid.\n[^3]: I'll mention an alternative approach, Expectation Propagation, that takes a different (not global objective based) approach further down.\n[^4]: This approach actually defines a family of $n$ new divergences, where you replace the $\\frac{1}{2}$ with $\\frac{1}{n}$ and similarly replace the square an exponent with n. Fully stepping through why this is neat wasn't worth how far afield it'd take us, but the original $CHIVI$ paper has some cool derivations based on this, one of which I'll discuss on the next section on importance sampling. \n[^5]: I thought about a section to explain the reparameterization trick, but there are enough good explanations online of the trick. If you're interested in learning more about why this is important for optimization through stocastic models, I'd recommend starting with Gregory Gundersen's explanation [here](https://gregorygundersen.com/blog/2018/04/29/reparameterization/) and then move on to the original Kingma & Welling, 2013 paper. As general advice on understanding it better though, I'll echo Greg's point that some of the online explanations I've seen are a bit loose- the key is that we want to express a gradient of an expectation (can't MC estimate for sure) as an expectation of a gradient (which we can MC estimate provided our convenient deterministic function $g$ is differentiable). \n[^6]: In a few posts, we're theoryposting for a bit.\n[^7]: we'll call it q(x) here to make the application super clear, but often\nI see the \"proposal\" distribution called f(x) and the the distribution we want\nto approximate called g(x). \n[^8]: If you're looking to learn about importance sampling for the first time,\na great place to start is Ben Lambert's video introductions to the basic idea:\n[video 1](https://www.youtube.com/watch?v=V8f8ueBc9sY), and [video 2](https://www.youtube.com/watch?v=F5PdIQxMA28). For building more intuition about\nwhy we need all these variance reducing modifications to general IS, Dan Simpson\nhas some great [slides](https://dpsimpson.github.io/pages/talks/Importance_sampling_unsw_2019.pdf) which have a side benefit of being hilarious. Those slides will mention a lot of the books/papers\nI find most instructive, but it's worth calling out especially Vehtari et Al's Pareto Smoothed\nImportance Sampling [paper](https://arxiv.org/abs/1507.02646) as particularly\nwell written and paradigm shaping. Finally, Elvira et Al's (2019) Multiple Importance Sampling\n[paper](https://projecteuclid.org/journals/statistical-science/volume-34/issue-1/Generalized-Multiple-Importance-Sampling/10.1214/18-STS668.full) is the most thorough I know, but isn't particularly approachable. Instead, for MIS I'd recommend starting with the first few minutes of [this talk](https://www.youtube.com/watch?v=dxFSwplfdpk) (although the main topic of their talk is less relevant, the visualizations are super helpful), and the first ~8 pages of [this paper](https://arxiv.org/pdf/2102.05407.pdf), also by Elvira et Al. (2021) (I especially like\nthat it spends a bit more time on notation; since multiple importance sampling comes from/comes up\nin computer graphics, the notational choices sometimes feel a bit annoying to me). Finally,\nthe [original MIS paper itself](https://dl.acm.org/doi/10.1145/218380.218498), Veach & Guibas (1995) is quite readable. but requires\na bit of reading around or reading into computer graphics to grok their examples\nand notational choices.",
    "supporting": [
      "variational_mrp_3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}