{
  "hash": "e929087df0b9e8fcf3758b3aeb125296",
  "result": {
    "markdown": "---\nlayout: post\ntitle: Variational Inference for MRP with Reliable Posterior Distributions\nsubtitle: Part 4- Some theory on why VI is hard\ndate: 2023-05-22\ndraft: True\ncategories:\n- MRP\n- Variational Inference\n---\n\n\nThis is section 4 in my series on using Variational Inference to speed up relatively complex Bayesian models like Multilevel Regression and Poststratification without the approximation being of disastrously poor quality. \n\nThe general structure for this post and the one before and after it will be to describe a problem with VI, and then describe how that problem can be fixed to some degree. Collectively, all the small improvements in these three posts will go a long way towards more robust variational inference. I'll also have a grab bag at the end of other interesting ideas from the literature I think are cool, but maybe not as important or interesting to me as the 3 below.\n\nIn the [last post](https://andytimm.github.io/posts/Variational%20MRP%20Pt3/variational_mrp_3.html) we took a look at how our ELBO objective requires  specific version of KL Divergence (the \"Exclusive\" formulation of KLD), and saw that it encoded a preference for a certain type of solution to the VI problem. Then we looked at CUBO and CHIVI, an alternative bound and algorithm that avoid this problem, often leading to a more useful posterior distribution by pursuing a more \"inclusive\" solution.\n\nIn this post, we'll leverage importance sampling to make the most of the samples we do have, emphasizing the parts of our $q(x)$ that look like $p(x)$ and de-emphasizing the parts that do not.\n\nThe rough plan for the series is as follows:\n\n1.  Introducing the Problem- Why is VI useful, why VI can produce spherical cows\n2.  How far does iteration on classic VI algorithms like mean-field and full-rank get us?\n3.  Problem 1: KL-D prefers exclusive solutions; are there alternatives?\n4. **(This post)** Problem 2: Not all VI samples are of equal utility; can we weight them cleverly?\n5. Problem 3: How can we know when VI is wrong? Are there useful error bounds?\n5. Better grounded diagnostics and workflow\n6. Seeing if some more sophisticated techniques like normalizing flows add much\n\n# Not all samples are equally good\n\nSo we've made an approximation $q(x)$ that's cheap to sample from, and is somewhat\nclose to $p(x)$, our true posterior. The way to improve the approximation we've\nfocused on so far is to just go back to the start and make $q(x)$ better; for example,\nthrough changing up the variational family, or to switching to a different\noptimization objective like the CUBO. That's one solution that's often necessary,\nbut can we work with a particular $q(x)$ we have and make better use of the parts of it that are the closest to being right?\n\n... Phased this way, this sounds a lot like importance sampling. If you haven't seen them before,\nan importance sampling estimator allows us to take draws from a (preferably) easy to sample\nfrom distribution[^1] and reweight the samples to look more like our true target\ndistribution. The weight $w_i$ (or ratio, $r_i$) for each sample $i$ take form:\n\n$$\nw_i = \\frac{p(x_i)}{q(x_i)}\n$$\nBefore you get worried that we don't have $p(x_i)$ because of the normalizing constant like every time we talk about having $p(x)$ in this series, there's a clever estimator that\n\"self-normalizes\" such that this can be a reasonable strategy. Intuitively, we're\njust placing more weight on samples likely $p(x)$.\n\nThis footenote[^2] has a selection of some of my favorite resources for learning more or refreshing your memory about importance sampling, but for the main discussion let me pull out some\nparticularly important sub-problems to solve in making a good importance sampling estimator, and good important sampling estimator for VI. \n\nFirst, our choice of the \"proposal\" distribution we're reweighting to be more like\n$p(x)$ matters for making this process practically feasible. We need the proposal\ndistribution to be close enough to $p(x)$ that a realistic number of the draws\nget non-negligible weights.\nIt might be true that we could draw proposals from a big $N$ dimensional uniform\ndistribution for every problem, but if we want to be done sampling enough this century\nwe need to at least get fairly close with our initial $q(x)$.\n\nA second, but related problem is that it's quite common for the unmodified\nimportance sampling estimator to have some weights which are orders and orders\nof magnitude higher than the average weight, blowing up the variance of the estimator.\nDan Simpson's slides I linked above has an instructive example with not too\nweird $p(x)$ and $q(x)$'s that has a max weight ~1.4 million (!) times the average.\nIf that happens, our estimator will essentially ignore most samples without gigantic\nweights, and it'll take ages for that estimator to tell us anything remotely\nreliable. \n\nSo with those points we need to address, here are the next topics in this post:\n\n1. Importance Weighted Variational Inference\n2. Robust importance sampling with built in diagnostics via Pareto-Smoothed Importance Sampling\n3. Combining multiple proposal distributions via Multiple Importance Sampling\n\n\n## Importance Weighted Variational Inference\n\nImportance Weighting for VI in it's simplest form is\npretty intuitive (draw samples from an already trained $q(x)$, weight them...), but let's derive the\nnew Importance Weighted Variational Inference (IWVI) estimator first since some nice\nintuition will come with it. \n\nI want to emphasize something that wasn't clear to me for a good while- these two ideas are not equivalent. While both\nare useful tools, the \"train time\",\nobjective-modifying IWVI estimator is a distinct approach from the \"test time\" importance sampling approach\nthat takes draws from $q(x)$ as already fixed and reweights them as best it can.\n\nWe'll aim to show that we can get a tighter ELBO by using importance sampling. This\ntype of tighter ELBO was first shown by [Burda et Al. (2015)](https://arxiv.org/abs/1509.00519)\nin the context of Variational Autoencoders after which is was fairly clear this could apply\nto variational inference, but [Domke and Sheldon (2018)](https://arxiv.org/abs/1808.09034)\nfleshed out some details of that extension- I'll be explaining some of the latter group's main\nresults first.\n\nTo start, imagine a random variable $R$, such that $\\mathbb{E}{R} = p(x)$, which\nwe'll think of as a estimator of $p(x)$. Then by Jensen's Inequality:\n\n$$\nlogp(x) = \\mathbb{E}logR + \\mathbb{E}log\\frac{p(x)}{R}\n$$\n\nThe first term is the bound, which will be tighter if $R$ is highly concentrated. \n\nThis is a more general form of the ELBO; we can make it quite familiar looking by\nhaving our $R$ above be:\n\n$$\nR = \\frac{p(z,x)}{q(z)}, z \\sim q\n$$\n\nThe reason for pointing out this fairly simple generalization is helpful is that it\nframes how to tighten our ELBO on $logp(x)$ via alternative estimators $R$.\n\nBy drawing $M$ samples and averaging them as in importance sampling, we get:\n\n$$\nR_M = \\frac{1}{M}\\sum_{m=1}^{M}\\frac{p(z_m,x)}{q(z_m)}, z_m \\sim q\n$$\nFrom there, we can derive a tighter bound on $logp(x)$, referred to as the IW-ELBO:\n\n$$\nIW-ELBO_M[q(z)||p(z,x)] := \\mathbb{E}_{q(z_{1:M})}log\\frac{1}{M} \\sum_{m=1}^{M}\\frac{p(z_m,x)}{q(z_m)}\n$$\nWhere we're using the $1:M$ as a shorthand for $q(z_{1:M}) = q(z_1)...q(z_M)$.\n\n\nIt's worth noting that the last few lines don't specify a particular form of importance\nsampling- we're getting the tighter theoretical bounding behavior from the averaging of samples\nfrom $q$. We'll see a particularly good form of importance sampling with desirable\npractical properties in a moment.\n\n### How does IW-ELBO change the VI problem conceptually?\n\nThe tighter bound is nice, but importance sampling also has the side effect (done right, side benefit)\nof modifying our incentives in choosing a variational family. To see what I mean,\nwe can re-use the example distributions from last post we used to build intuition for KL Divergence, where red was the true distribution,\nand green were our potential approximations. If we're not going to draw multiple samples and weight them, it makes sense to choose something like the first plot below. Every draw in the middle of the two target modes\nis expensive per our ELBO objective, so better to choose a mode.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrkl_plot <- mixture %>% ggplot(aes(x = normals)) +\n  geom_density(aes(x = normals), color = \"red\") +\n  geom_density(aes(x = mode_seeking_kl), color = \"green\") + ggtitle(\"Without weighting, we prefer to capture a mode\") +\n  xlab(\"\")\n\nfkl_plot <- mixture %>% ggplot(aes(x = normals)) +\n  geom_density(aes(x = normals), color = \"red\") +\n  geom_density(aes(x = mean_seeking_kl), color = \"green\") + ggtitle(\"With importance sampling, weights allow us to prefer coverage\") +\n  xlab(\"\")\n\ngrid.arrange(rkl_plot,fkl_plot)\n```\n\n::: {.cell-output-display}\n![](variational_mrp_pt4_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nIf we can use importance sampling though, quite the opposite is be true! Note that we're\nstill using the ELBO, a reverse-KL based metric- that hasn't changed. What has changed is our\nability to mitigate the objective costs of those samples between the two extremes. Via this \"train time\" implementation of IS,\npoints outside the two target modes will get lower importance weights, and points within\nthe modes will get higher ones, so as long as we're covering the modes with some reasonable amount of probability mass, and drawing enough samples we can actually\ndo better with the distribution centered between the modes.\n\nTo further drive home the point about how a \"train time\" and \"test time\" implementations of IS differ, could \"test time\" IS do this? Not really- because the ability to better minimize the ELBO via sampling requires the IW-ELBO variant and associated training process. If we hard-coded $q(x)$ as the green $N(9,4)$ shown above, \"test time\" IS could weight the right samples up to better approximate $p(x)$, but it doesn't fundamentally alter our optimization problem the way the IWVI estimand does.\n\nWe can also imagine how varying the number of samples might effect optimization.\n Between $M=1$ and \"enough draws to get all the benefits of IS\",\nwe can imagine there's a slow transition from \"just stick with 1 mode\" and \"go with IS\".\nSo it seems like we should be worried about getting the number of samples right, but\nfortunately as we'll see in the next section there are great rules of thumb in\nsome variants of IS. We'll still need to bear the cost of sampling (which gets higher as $q(x)$ becomes \"further\" from $p(x)$, as we'll need more samples to weight into a good approximation), but\nthe cost of sampling for most VI implementations will often be pretty manageable\nif our proposal distribution is somewhat close to $p(x)$.\n\nAnother way to think about how importance sampling changes our task with variational\ninference is to think about what sorts of distributions make sense to have as\nour variational family, and even which objective might be better given IS. On choice\nof a variational family, if we're aiming for coverage, moving towards thicker-tailed distributions like t distributions makes a lot of sense. While we explored\nthe IW-ELBO above to build intuition, there's no reason not to apply VI to the CUBO\n and thus CHIVI- this also naturally produces nicely overdispersed distributions which can\n be importance sampled closer to the true $p(x)$. This idea of aiming for a\n wide proposal to sample from is referred to in the importance sampling literature (eg [Owen, 2013](https://artowen.su.domains/mc/)) as \"defensive sampling\", with [Domke and Sheldon (2018)](https://arxiv.org/abs/1808.09034) exploring the VI connection more fully. For intuition, by ensuring most of $p(x)$ is covered by some reasonable mass makes it easier to efficiently\n get draws that can be weighted into a final posterior, even if the unweighted\n posterior might be too wide.\n\n## Solving our IS problems with Pareto-Smoothed Importance Sampling\n\nAs we've been talking about importance sampling, we've been leaving some of the\nmessier details aside (how many samples to draw, how to deal with the cases when some\nof the weights get huge, how to know when our proposal distribution is \"close\" enough).\n\nWhile the Importance Sampling Literature is huge and there are a lot of possible\nsolutions here, I'll next introduce [Vehtari et Al. (2015)](https://arxiv.org/abs/1507.02646)'s Pareto-Smoothed Importance Sampling. I'm a huge fan of this paper- it's a really\nelegant and powerful tool, derived from taking Bayesian principles seriously.\n\nAbove, I described a common failure mode for IS estimators, where some weights are orders of magnitude\nlarger than others, with this long right tail of ratios dominating the weighted average and blowing up the variance of the estimator. Pareto-Smoothed Importance Sampling proposes to model those\ntail values as coming from a Generalized Pareto Distribution, a distribution for\ndescribing extreme values, and replace the most extreme weights with modeled (and\nmore stable) values.\n\nFor concreteness, let's introduce a simple 1-D example. We'll aim to use importance\nsampling to approximate distributions <span style=\"color:red;\">$\\mathcal{T}(\\mu = 0,\\sigma = 1,t =5$)</span> and <span style=\"color:blue;\">$\\mathcal{C}(x_0= 0,\\gamma = 10)$</span> with a <span style=\"color:green;\">$\\mathcal{N}(\\mu = 0,\\sigma = 1$)</span> distribution. If that\nsounds like the opposite of preferring wide tails on $q(x)$'s I described above,\nyou're right, but using a poor choice here will illustrate some useful properties.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulated_data <- tibble(\nq_x = rnorm(100000),\nmanageable_p_x = rt(100000,5),\nunmanageable_p_x = rcauchy(100000),\nmanageable_ratios = dt(q_x,5)/dnorm(q_x),\nunmanageable_ratios = dcauchy(q_x,0,10)/dnorm(q_x)\n)\n\nsimulated_data %>%\n            pivot_longer(c(q_x,manageable_p_x,unmanageable_p_x),\n                         values_to = \"draws\",\n                         names_to = \"distributions\") %>%\n            ggplot(aes(x = draws, color = distributions)) +\n            geom_density() +\n            # If you wanted to show the full reach of the Cauchy, it'd be\n            # hard to see the shape of the T vs N; it's that wide.\n            # Hence the 6k values removed\n            xlim(-10,10) +\n            ggtitle(\"Visualizing the distributions in question\") +\n            theme(legend.position=\"none\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 6245 rows containing non-finite values (stat_density).\n```\n:::\n\n::: {.cell-output-display}\n![](variational_mrp_pt4_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThe tails on that Cauchy distribution are super, super wide compared to our\nnormal, so the samples far, far out in the tails of the normal will need massive\nweights to approximate the cauchy. The t-distribution is wider too, so we'll need\nsome higher weights, but not nearly as many. As a way to visualize this, you can\nsee that just a handful of draws have weights away from ~1, but these weights are\nas much as 5000x higher than the mean ratio, and will dominate any average we make of them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulated_data %>%\n  arrange(unmanageable_ratios) %>%\n  mutate(n = seq(1,100000)) %>%\n  ggplot(aes(x = n,y = unmanageable_ratios)) +\n  geom_point() +\n  ggtitle(\"A pretty typical 'unsaveable' set of importance ratios\")\n```\n\n::: {.cell-output-display}\n![](variational_mrp_pt4_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe t-distribution ratio plot would look similar, but with a much smaller y-scale. The max weight\nwould still be much larger than the average, but more than an order of magnitude or so less large:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_t <- mean(simulated_data$manageable_ratios)\nmax_t <- max(simulated_data$manageable_ratios)\n\nmean_c <- mean(simulated_data$unmanageable_ratios)\nmax_c <-max(simulated_data$unmanageable_ratios)\n\nprint(paste0(\"the mean of the t is: \",mean_t,\" compared to a max of \",max_t,\";\",\n             \"The cauchy cause is more extreme- the mean of the cauchy is: \",mean_c,\" compared to a max of \",max_c))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"the mean of the t is: 0.995904306317625 compared to a max of 164.448932152079;The cauchy cause is more extreme- the mean of the cauchy is: 0.283655933763642 compared to a max of 1428.22324178729\"\n```\n:::\n:::\n\n\nSo let's bring this back to Pareto smoothing here. We want to model and smooth\nthat long tail of the ratio distribution. It turns out there's plenty of study\nof the distribution of extreme events, and there's some classical limit results showing:\n\n$$\nr(\\theta) | r(\\theta) > \\tau \\rightarrow GPD(\\tau,\\sigma,k), \\tau \\rightarrow \\infty\n$$\n\nwhere $\\tau$ is a lower bound parameter, which in our case defines how many ratios from the tail\nwe'll actually model. $\\sigma$ is a scale parameter, and $k$ is a unconstrained shape parameter. Without getting too far into the weeds, we can implicitly define $\\tau$ via using a well-supported role of thumb suggesting to use the M largest ratios, $M = min(0.2S,3\\sqrt{S})$[^3]. From there, the $\\hat{k}$ and $\\hat{\\sigma}$ have easy and efficient estimators. The Generalized Pareto Distribution has form:\n\n$$\n\\frac{1}{\\sigma} \\left(1 + k\\frac{r - \\tau}{\\sigma} \\right)^{-1/k-1}\n$$\n\nand we can replace our M biggest ratios with estimated values calculated via the CDF of the\nGeneralized Pareto Distribution.\n\nOne of the best things about PSIS is it comes with a built in diagnostic via $\\hat{k}$. To see\nhow this works, it's useful to know that importance sampling depends on how many moments $r(\\theta)$ has- for example, if at least two moments exist, the vanilla IS estimator has finite variance (which is obviously required, but no guarantee of performance since it might be finite but massive). The GPD\nhas $k^{-1}$ finite fractional moments when $k > 0$.\n\nVehtari et al. show that the replacement of the largest M ratios above changes\nPSIS to have finite variance and an error distribution converging to normal when\n$k \\in (.5,1)$. Intuitively, $k > .5$ implies the raw ratios have infinite variance,\nbut PSIS trades a little bias to make the variance finite again.\n\nWhat about actually practical to work with variance? This is the\nreally cool bit- $k < .7$ turns out to be a remarkably robust indicator of when\nwe can expect PSIS to work in a ton of different simulation studies and practical\nexamples.\n\nWhy is this true? 1.4 fractional moments seems awful arbitrary, right? Let's ask\nan alternative question, and kill two birds with one stone: what sample size do\nwe need for PSIS to work? [Chaterjee and Draconis (2018)](https://arxiv.org/abs/1511.01437)\nshowed that for a given accuracy, how big $S$ needs to be for importance sampling\nmore broadly depends on how close $q(x)$ is to $p(x)$ in KL distance- we need to\nsatisfy $log(S) \\geq \\mathbb{E}_{\\theta \\sim q(x)}[r(\\theta)log(r(\\theta))]$ to\nget accuracy. \n\nWell, we don't know the distribution of $r$, we should have some pretty good\nintuition that the important part (read: that explosive, variance ruining tail) \nis Pareto. If we take $r$ as exactly Pareto, you can trace out $S$ for different\n$\\hat{k}$[^4], and to give a few example points-\n\n| $\\hat{k}$  | $S$ needed  |\n|--------|--------|\n| .5  | ~1,000   |\n| .7   | ~140,000   |\n| .8 | 1,000,000,000,000   |\n| .9 | please stop you're making your compute sad. |\n\n: for given $\\hat{k}$, roughly what $S$ is needed if $r$ is exactly Pareto {tbl-colwidths=\"[75,25]\"}\n\nWhile we of course know $r$ isn't Pareto exactly exactly, hopefully this helps with intuition\naround $\\hat{k}$ telling us when we're getting into \"sampling forever to have any chance\nat all to control the variance\" land.\n\nNeat! So what does that look like for our Cauchy and T distribution example?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmanageable_psis <- psis(log(simulated_data$manageable_ratios),\n                       r_eff = NA)\n\nunmanageable_psis <- psis(log(simulated_data$unmanageable_ratios),\n                          r_eff = NA)\n\nmanageable_psis$diagnostics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$pareto_k\n[1] 0.5963495\n\n$n_eff\n[1] 62963.93\n```\n:::\n\n```{.r .cell-code}\nunmanageable_psis$diagnostics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$pareto_k\n[1] 0.8533127\n\n$n_eff\n[1] 249.2052\n```\n:::\n:::\n\n\nAs we expected, the the Normal proposal distribution isn't ideal for the T\ndistribution, but it's manageable. On the other hand, we'd need somewhere\nbetween **a trillion and \"oh god no :(\"** samples to make the normal proposal work out\nfor the Cauchy.\n\nBringing the discussion back to variational inference, PSIS is super helpful-\nimportance sampling more generally broadens the class of $q(x)$es that are\nclose enough to $p(x)$ for variational inference to work, and PSIS considerably\nwidens that basin of feasibility. The extensive theoretical and simulation framework around the method\nalso give us a solid way to realize when importance sampling isn't feasible via the $\\hat{k}$ diagnostic,\nand tells us how roughly samples we need to draw. Super, super cool.\n\nOne more great thing PSIS does for variational inference- $\\hat{k}$ serves as\na powerful diagnostic for variational inference itself! I'll save most of this\ndiscussion for the next post (on diagnostics), but to sketch out the logic- $\\hat{k}$\ntells us when $q(x)$ is too far from $p(x)$ for importance sampling to work, which\nis a function of KL Divergence from $q(x)$ to $p(x)$- if that distance is too great\nfor importance sampling to allow us to bridge, that implies we aren't close\nenough to trust our base variational approximation either!\n\n\n## Multiple Proposal Distributions with Multiple Importance Sampling\n\nWhy stop at just one proposal distribution? This is basically the jumping off point for \nMultiple Importance sampling, or MIS. If we have several different $q(x)$, and\neach does a somewhat better job of handling a certain region of the target\nposterior, then we can efficiently combine them using MIS into an overall\nbetter final estimate, and this will work out to be pretty obviously more\noptimal than just fitting a bunch of VI approximations and averaging them.\n\nIf we can suddenly have multiple different $q(x)$ working together, this naturally\nexplodes the search space for a good VI strategy. I'd refer the more interested\nreader to [Elvira et al. (2019)](https://projecteuclid.org/journals/statistical-science/volume-34/issue-1/Generalized-Multiple-Importance-Sampling/10.1214/18-STS668.full) which lays out\na framework for thinking about all the decision space of MIS more comprehensively,\nbut for the purposes of improving VI specifically, I'll cover:\n\n1. How do we weight the proposals together?\n2. Which proposals make sense to include in a MIS framework?\n3. How practical is fitting multiple proposals?\n\n### How do MIS weights work?\n\nHow do we generalize a notion of importance weights like the one introduced above:\n\n$$\nw_i = \\frac{p(x_i)}{q(x_i)}\n$$\n\nto multiple proposals? While there are some obviously not good properties we\nwant to avoid (it'd be pretty silly to give up our unbiasedness), there are a ton\nof apparent degrees of freedom in MIS weighting. we'll relax this assumption in a bit, but let's start by assuming we don't have any prior information about which proposals might be better, and that we'll draw the same number of samples from each proposal.\n\nWhile I won't work through as\nextensive of an example as in the last section, let's fix an example where we'll have $J = 3$ different proposals, <span style=\"color:cyan;\">$q_1(x)$)</span>, <span style=\"color:purple;\">$q_2(x)$</span>, and <span style=\"color:pink;\">$q_3(x)$)</span>.\n\nA first question is how to choose the denominator in the weight. One simple and\nefficient option is to simply use the density of a sample from $j$ to make a weight,\nfor example weighting a draw from <span style=\"color:pink;\">$q_3(x)$)</span> as:\n\n$$\nw_{i} = \\frac{p(x_i)}{\\textcolor{pink}{q_3(x_i)}}\n$$\nThis works, and is pretty common in MIS applications, but we're not really using all the information we have from having several proposals. We can get a provably lower variance estimator\nby defining the mixture of the densities $\\psi(x)$ as:\n\n$$\n\\psi(x) = \\frac{1}{J} \\sum\\limits_{J = 1}\\limits^{J} q_j(x)\n$$\n\nand using that as the denominator. So for the example above, this'd be:\n\n$$\nw_{i} = \\frac{p(x_i)}{\\frac{1}{3}(\\textcolor{cyan}{q_1(x)} + \\textcolor{purple}{q_2(x_i)} + \\textcolor{pink}{q_3(x_i))}}\n$$\nBy defining this mixture and and incorporating it into our weighting, we intuitively\nshould have more efficient exchange of information between the different $q(x)$. By\nthis, I mean that we no longer just are weighting each sample from a proposal using\ninformation from that one proposal; we're now using everything at hand.\n\nThis feels like it should be pretty solidly better than just using a single proposal density,\nand indeed Elvira et al. have a result showing that the variance of the mixture\nbased weighting scheme is under pretty general conditions $\\leq$ that of the\nsingle proposal density one[^5].\n\n[Veach and Guibas (1995)](https://dl.acm.org/doi/10.1145/218380.218498), the paper\nto introduce MIS, called this\nweighting scheme the *balance heuristic*, since the weighting scheme is unique\nin that each sample value at particular $x$ is the same regardless of which distribution produced it. They also prove a bound on the variance of this estimator, showing that there isn't a\nlot of room to improve on it, even in the most ideal circumstances. Without getting\ninto the weeds, their result suggests that there isn't a massively better general\ncase weighting scheme, which is a helpful guide to practical use.\n\nWhen can we do (a bit) better than the weighting scheme above? The answer is essentially\nin cases where we know some of our $J$ proposals are much better than others. In these\nsituations, the variance can often be lowered by pushing weights towards the extremes, and making\nlow weights closer to zero, and high weights closer to 1. Their *cutoff heuristic*\nsuggests an estimator where you pick some bound $\\alpha$, below which low\nweights are reassigned to zero (and the rest of the distribution is adjusted\nback to sum correctly). Their also propose the *power heuristic*-\n\n$$\nw_i = \\frac{p_i^\\beta}{\\sum\\limits_{j}p_j^\\beta}\n$$\nwhich raises the weights to a power $\\beta$, and normalizes. For intuition, notice that if\n$\\beta = 1$, then this is the *balance heuristic* again, and as $\\beta \\rightarrow \\infty$, this moves towards only selecting the best proposal at each point.\n\nSo stepping back, we have some provably efficient, provably hard to beat ways to use MIS to combine\nvariational approximations together. Again, there's a whole literature on MIS\nwhich the Elvira paper above reviews, but fairly intuitive weighting schemes\nexist that work well in most cases, and there are reasonable things to try in\nmore atypical cases to reduce the variance of the MIS estimator as well.\n\n###  What proposals combine best?\n\nA next natural question is: what different proposals should we use here? There's\na little less work in this area than I expected, but there are a couple of papers; my favorite is [Lopez et al. (2020)](https://arxiv.org/abs/2002.07217)[^6]. \n\nThey find that using VI approximations based on different objectives is quite\nperformant- for example, having both a vanilla ELBO, IW-ELBO and $\\chi^2$ divergence based\nVI approximation works particularly well, and as you'd expect, better than any individual\nmodel, just like we'd expect with regular ensembling techniques. They also look\nat taking some samples directly from our priors, which is moderately surprising\nto me that it works given how broad weakly-informative priors usually are. Overall\nthough, a core nugget of logic from ensembling more generally applies here too:\nwe want to find proposals that are both good and sufficiently different from one\nanother that combining them adds value.\n\nIt seems to me there's a lot of room to explore this search space still;\nthere are a lot of generic ML ensembling tricks that feel like they could work here.\nFor example, could we save state several times throughout optimizing a\nvariational approximation, and MIS combine samples from each of those, similar to\nhow people cheaply ensemble for neural networks? Or are there ways to optimize\nthe proposals for use together in this way?\n\n### How practical is MIS for VI?\n\nA last obvious question is whether fitting many variational approximations and\ncombining them is computationally practical. While MIS for VIS certainly trades\nback some computational cost and time for potential accuracy, the good news is everything feels\ncheap compared to MCMC.\n\nFitting $J$ VI approximations instead of 1 roughly scales your compute need for\nfitting the models by a factor of ~$J$, and then there's a small additional cost\nin the MIS combination stage to evaluate all the models to make each importance\nsampling weight denominator. Unlike with MCMC, these computational needs are parallelizable.\n\nLopez et al. (2020) find that using 3 proposals slightly more than triples their\ncompute cost given all the objective based models take  around the same time to fit, and in practice slightly more than triples their compute time as\nwell since they didn't do the work to parallelize their models. On the problems\nthey were working on, this is a pretty small (~30s more time) time cost in exchange\nfor a meaningful accuracy improvement in the real world biology application they\napply this to.\n\n# Can we bound error in terms of ELBO or CUBO?\n\n## Wasserstein Bounds\n\n# Conclusions + Bonus Context\n\n\n[^1]: we'll call it q(x) here to make the application super clear, but often\nI see the \"proposal\" distribution called f(x) and the the distribution we want\nto approximate called g(x). \n[^2]: If you're looking to learn about importance sampling for the first time,\na great place to start is Ben Lambert's video introductions to the basic idea:\n[video 1](https://www.youtube.com/watch?v=V8f8ueBc9sY), and [video 2](https://www.youtube.com/watch?v=F5PdIQxMA28). For building more intuition about\nwhy we need all these variance reducing modifications to general IS, Dan Simpson\nhas some great [slides](https://dpsimpson.github.io/pages/talks/Importance_sampling_unsw_2019.pdf) which have a side benefit of being hilarious. Those slides will mention a lot of the books/papers\nI find most instructive, but it's worth calling out especially Vehtari et Al's Pareto Smoothed\nImportance Sampling [paper](https://arxiv.org/abs/1507.02646) as particularly\nwell written and paradigm shaping. Finally, Elvira et Al's (2019) Multiple Importance Sampling\n[paper](https://projecteuclid.org/journals/statistical-science/volume-34/issue-1/Generalized-Multiple-Importance-Sampling/10.1214/18-STS668.full) is the most thorough I know, but isn't particularly approachable. Instead, for MIS I'd recommend starting with the first few minutes of [this talk](https://www.youtube.com/watch?v=dxFSwplfdpk) (although the main topic of their talk is less relevant, the visualizations are super helpful), and the first ~8 pages of [this paper](https://arxiv.org/pdf/2102.05407.pdf), also by Elvira et Al. (2021) (I especially like\nthat it spends a bit more time on notation; since multiple importance sampling comes from/comes up\nin computer graphics, the notational choices sometimes feel a bit annoying to me). Finally,\nthe [original MIS paper itself](https://dl.acm.org/doi/10.1145/218380.218498), Veach & Guibas (1995) is quite readable, but requires\na bit of reading around or reading into computer graphics to grok their examples\nand notational choices. \n[^3]: Slight more weeds here- it turns out that this idea to use Vehtari et al.'s\nrule of thumb for selecting M and getting $\\tau$ from there is fairly important. The\nGPD Approximation is pretty sensitive to getting $\\tau$ right- it'll be poor\nif $\\tau$ is too low. Having a deterministic rule of thumb that preforms better than alternative\nmore complicated schemes for estimating $\\tau$ is great, and they work through\nshowing it works well in most reasonable cases.\n[^4]: I'll be lazy here and not derive or plot this- you can see the plot in Dan Simpson's\nslides mentioned above.\n[^5: One fascinating caveat here is that they proved this only for the case\nwhere we know the normalizing constant, not the self-normalized case we pretty\nmuch always have to live with, but they have some numerical results and some\npretty common sense arguments that the result should extend in most reasonable\ncases to SNIS as well.\n[^6]: Worth noting that one of the authors here is Michael l. Jordan, which is a\npretty good heuristic for \"this will be a banger of a stats paper\".",
    "supporting": [
      "variational_mrp_pt4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}