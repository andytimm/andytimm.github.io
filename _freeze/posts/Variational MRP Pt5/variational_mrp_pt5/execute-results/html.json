{
  "hash": "b2f04d7bafb5f66024ed31ebea962696",
  "result": {
    "markdown": "---\nlayout: post\ntitle: Variational Inference for MRP with Reliable Posterior Distributions\nsubtitle: Part 5- Normalizing Flows\ndate: 2023-06-11\ndraft: False\nimage: images/32_layer.gif\ncategories:\n  - MRP\n  - Variational Inference\n  - Normalizing Flows\n---\n\nThis is section 5 in my series on using Variational Inference to speed up relatively complex Bayesian models like Multilevel Regression and Poststratification without the approximation being of disastrously poor quality. \n\nThe general structure for this post and the posts around it will be to describe a problem with VI, and then describe how that problem can be fixed to some degree. Collectively, all the small improvements in these four posts will go a long way towards more robust variational inference. I'll also have a grab bag at the end of other interesting ideas from the literature I think are cool, but maybe not as important or interesting to me as the 3 below.\n\nIn the [last post](https://andytimm.github.io/posts/Variational%20MRP%20Pt4/variational_mrp_4.html) we saw a variety of different ways importance sampling can be used to improve VI and make it more robust, from defining a tighter bound to optimize in the importance weighted ELBO, to weighting $q(x)$ samples together efficiently to look more like $p(x)$, to combining entirely different variational approximations together to cover different parts of the posterior with multiple importance sampling.\n\nIn this post, we'll tackle the problem of how to define a deeply flexible variational\nfamily $\\mathscr{Q}$ that can adapt to each problem while still being easy to sample from.\nTo do this, we'll draw on normalizing flows, a technique for defining a composition\nof invertible transformations on top of a simple base distribution like a normal\ndistribution. We'll build our way up to using increasingly complex neural networks\nto define those transformations, allowing for for truly complex variational\nfamilies that are problem adaptive, training as we train our variational model.\n\nThe rough plan for the series is as follows:\n\n1.  Introducing the Problem- Why is VI useful, why VI can produce spherical cows\n2.  How far does iteration on classic VI algorithms like mean-field and full-rank get us?\n3.  Problem 1: KL-D prefers exclusive solutions; are there alternatives?\n4.  Problem 2: Not all VI samples are of equal utility; can we weight them cleverly?\n5.  **(This post)** Problem 3: How can we get deeply flexible variational approximations; are Normalizing Flows the answer?\n6. Problem 4: How can we know when VI is wrong? Are there useful error bounds?\n7. Better grounded diagnostics and workflow\n\n# A problem adaptive variational family with less tinkering?\n\n![](images/flows_stairs_meme.png){fig-alt=\"Something about NNs makes me meme more\"}\n\nJumping from mean-field or full-rank Gaussians and similar distributions\nto neural networks feels a little... dramatic[^1],  so I want to spend\nsome time justifying why this is a good idea.\n\nFor VI to work well, we need something that's still simple to sample from, but capable\nof, in aggregate, representing a posterior that is probably pretty complex. Certainly,\nsome problems are amenable to the simple variational families $\\mathscr{Q}$ we've tried so far,\nbut it's worth re-emphasizing that we're probably trying to represent something complex,\nand even moderate success at that using a composition of normals should be\na little surprising, not the expected outcome.\n\nIf we need $\\mathscr{Q}$ to be more complex, aren't there choices between what\nwe've seen and a neural network? There's a whole literature of them- from using\nmixture distributions as variational distributions to inducing some additional\nstructure into a mean-field type solution if you have some specific knowledge\nabout your target posterior you can use. By and large though, this type of\nclass of solutions has been surpassed by normalizing flows in much of modern\nuse for more complex posteriors.\n\nWhy? A first reason is described in the paper that started the normalizing flows\nfor VI literature, Rezende and Mohamed's [**Variational Inference with Normalizing Flows\n**](https://arxiv.org/pdf/1505.05770.pdf): making our base variational distribution\nmore complex adds a variety of different computational costs, which add up quickly.\nThis isn't the most face-valid argument when I'm claiming a neural network\nis a good alternative, but it gets more plausible when you think through\nhow poorly it'd scale to keep making your mixture distribution more and more\ncomplex as your posteriors get harder to handle. So this is a *scalability*\nargument- it might sound extreme to bring in a neural net, but as problems\nget bigger, scaling matters.\n\nThe other point I'd raise is that all these other tools aren't very black box at\nall- if we can make things work with a problem-adapted version of mean-field with\nsome structure based on the knowledge of a specific problem we have, that sounds\nlike it gets time consuming fast. If I'm going to have\nto find a particular, problem-specific solution each time I want to use variational\ninference, that feels fragile and fiddly.\n\nThe novel idea with normalizing flows is that we'll start with a simple base\ndensity like a normal distribution that is easy to sample from, but instead of only optimizing the parameters\nof that normal distribution, we'll also use the training on our ELBO or\nother objective to learn a transformation that reshapes that normal distribution to\nlook like our posterior. By having that transforming component be partially\ncomposed of a neural network,\nwe give ourselves access to an incredibly expressive, problem adaptive,\nand heavily scalable variant of variational inference that is quite\nwidely used.\n\nAnd if the approximation isn't expressive enough? Deep learning researchers have\nan unfussy, general purpose innovation for that: MORE LAYERS![^2]\n\n![](images/more_layers.png){fig-alt=\"Wow such estimator, very deep\"}\n\n# What is a normalizing flow?\n\nA normalizing flow transforms a simple base density into a complex one through\na sequence of invertible transformations. By stacking more and more of these\ninvertible transformations (having the density \"flow\" through them), we can create\narbitrarily complex distributions that remain valid probability distributions. Since\nit isn't universal in the flows literature, let me be explicit that I'll consider\n\"forward\" to be the direction flowing from the base density to the posterior, and\nthe \"backward\" or \"normalizing\" direction as towards the base density.\n\n![Image Credit to [Simon Boehm](https://siboehm.com/articles/19/normalizing-flow-network) here](images/normalizing-flow.png)\n\nIf we have a random variable $z$, with distribution $q(x)$, some function $f$ with an inverse\n$f^{-1} = g, g \\circ f(x) = x$, then the distribution of the result of\none iteration of x through, $q^\\prime(x)$ is:\n\n$$\nq\\prime(x) = q(x) \\lvert det \\frac{\\partial f^{-1}}{\\partial x^\\prime} \\rvert = q(x) \\lvert \\frac{\\partial f}{\\partial x} \\rvert^{-1}\n$$\nI won't derive this identity[^3], but it follows from the chain rule and the\n properties of Jacobians of invertible functions.\n\nThe real power comes in here when we see that these transformations stack. If\nwe've got a chain of transformations (e.g. $f_K(...(f_2f_1(x))$:\n\n$$\nx_K = f(x) \\circ ... \\circ f_2 \\circ f_1(x_0)\n$$\n\nthen the resulting density $q_K(x)$ looks like:\n\n$$\nln q_K (x_K) = lnq_0(x_0) - \\sum \\limits_{K = 1}\\limits^{K} ln  \\lvert \\frac{\\partial f_k}{\\partial x_{k-1}} \\rvert^{-1}\n$$\n\nNeat, and surprisingly simple! If the terms above are all easy to calculate,\nwe can very efficiently stack a bunch of these transformations and make\nan expressive model.\n\n## Normalizing flows for variational inference versus other applications\n\nOne source of confusion when I was learning about normalizing flows for\nvariational inference was that variational inference makes up a fairly\nsmall proportion of the use cases for normalizing flows, and thus the academic\nliterature and online discussion. More common applications include density estimation, image generation,\nrepresentation learning, and reinforcement learning. In addition to making specifically applicable\ndiscussions harder to find, often resources will make strong claims about properties of a given\nflow structure, that really only holding in some subset of the above applications[^4].\n\nBy taking a second to explain this crisply and compare different application's needs,\nhopefully I can save you some confusion and make engaging with the broader literature easier.\n\nTo start, consider the relevant operations we've introduced so far:\n\n1. computing $f$, that is pushing a sample through the transformations\n2. computing $g$, $f$'s inverse which undoes the manipulations\n3. computing the (log) determinant of the Jacobian\n \n1 and 3 definitely need to be efficient for our use case, since we need to be\nable to sample and push through using the formula above efficiently to calculate\nan ELBO and train our model. 2 is where things get\nmore subtle: we definitely need $f$ to be invertible, since our formulas above\nare dependent on a property of Jacobians of invertible functions. But we don't\nactually really need to explicitly compute $g$ for variational inference. Even knowing the inverse\nexists but not having a formula might be fine for us!\n\nContrast\nthis with density estimation, where the goal would not to sample from the distribution,\nbut instead to estimate the density. In this case, most of the time would be\nspent going in the opposite direction, so that they can evaluate the log-likliehood\nof the data, and maximize it to improve the model[^5]. The need for an expressive\ntransformation of densities unite these two cases, but the goal is quite different!\n\nThis level of goal disagreement also shows it face in what direction papers\nchoose to call forward: Most papers outside of variational inference applications consider forward to be the opposite of what I do here. For them, \"forward\" is the direction towards\nthe base density, the normalizing direction. \n\nFor our use, hopefully this short digression has clarified which operations we need to be\nfast versus just exist. If you dive deeper into\nfurther work on normalizing flows, hopefully recognizing there are two\ndifferent ways to consider forward helps you more quickly orient yourself\nto how other work describes flows.\n\n# How to train your neural net\n\nNow, let's turn to how we actually fit a normalizing flow. Since this would be a bit\nhard to grok a code presentation if I took advantage of the full flexibility and abstraction that\nsomething like [`vistan`](https://github.com/abhiagwl/vistan/tree/master) provides, before\nheading into general purpose tools I'll talk through a bit more explicit implementation\nof a simpler flow called a planar flow in `PyTorch` for illustration. Rather than\nreinventing the wheel, I'll leverage Edvard Hulten's great implementation [here](https://github.com/e-hulten/planar-flows).\n\nIn this section,\nI'll define conceptually how we're fitting the model, and build out a fun\ntarget distribution and loss- since I expect many people reading\nthis may moderately new to PyTorch, I'll explain in detail\nthan normal what each operation is doing and why we need it.\n\n\n\nLet's first make a fun target posterior distribution from an image to model. I\nthink it'd be a fun preview gif for the post to watch this be fit from a normal,\nso let's use this ring shaped density.\n\n![](images/ring_true_density.png){fig-alt=\"Wow such estimator, very deep\"}\n\nThis is a solid starting example in that this'd be quite\nhard to fit with a mean-field normal variational family, but it's pretty easy to define in PyTorch as well:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# https://github.com/e-hulten/planar-flows/blob/master/target_distribution.py\ndef ring_density(z):\n                exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)\n                exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)\n                u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2\n                u = u - torch.log(exp1 + exp2 + 1e-6)\n                return u\n```\n:::\n\n\nNow let's define our loss for training, which will just be a slight\nreformulation of our ELBO:\n\n$$\n \\mathbb{E}[logp(z,x)] - \\mathbb{E}[logq(z)]\n$$\n\nTo do this, we'll define a class for the loss.\n\nFirst, we pick a simple base distribution to push through our flow, here a \n2-D Normal distribution called `base_distr`. We'll also include the interesting\ntarget we just made above, `distr`.\n\nNext, the forward pass structure. The `forward` method is the is the core of the computational graph structure in PyTorch. It defines operations that are applied to the input tensors to compute the output, and \ngives PyTorch the needed information for automatic differentiation, which allows smooth calculation\nand backpropagation of loss through the model to train it. This `VariationalLoss`\nmodule will run at the end of the forward pass to calculate the loss and allow us\nto pass it back through the graph for training.\n\nKeeping with the structure above of numbering successive stages of the flow,\n`z0` here is our base distribution, and `z` will be the learned approximation\nto the target. In addition to the terms you'd expect in the ELBO, we're also\ntracking and making use of the sum of the log determinant of the Jacobians to\na handle on the distortion of the base density the flows apply.\n\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# https://github.com/e-hulten/planar-flows/blob/master/loss.py\nclass VariationalLoss(nn.Module):\n  def __init__(self,distribution):\n      super().__init__()\n      self.distr = distribution\n      self.base_distr = MultivariateNormal(torch.zeros(2), torch.eye(2))\n\n  def forward(self, z0: Tensor, z: Tensor, sum_log_det_J: float) -> float:\n      base_log_prob = self.base_distr.log_prob(z0)\n      target_density_log_prob = -self.distr(z)\n      return (base_log_prob - target_density_log_prob - sum_log_det_J).mean()\n```\n:::\n\n\n# A basic flow\n\nNext, let's define the structure of the actual flow. To do this, we'll first\ndescribe a single layer of the flow, then we'll show structure to stack\nthe flow in layers.\n\nOur first flow we look at will be the **planar flow** from the original\nNormalizing Flows for variational Inference paper mentioned above. The name\ncomes from how the function defines a (hyper)plane, and compress or expand\nthe density around it:\n\n$$\nf(x) = x + u*tanh(w^Tx + b), w, u \\in \t\\mathbb{R}^d, b \\in\t\\mathbb{R} \n$$\n\n$w$ and $b$ define the hyperplane and u specifies the direction and strength\nof the expansion. I'll show a visualization of just one layer of that below.\n\nIf you're more used to working with neural nets, you might wonder why we\nchoose the non-linearity $tanh$ here, which generally isn't as popular as something\nlike $relu$ or it's variants in more recent years due to it's more unstable\ngradient flows. As the authors show in appendix $A.1$, functions like the\nabove aren't actually always invertible, and choosing $tanh$ allows them\nto impose some constraints that make things reliably invertible. See the Appendix\nfor more details about how that works, or take a careful look at Edvard's\nimplementation of the single function below.\n\nThere isn't that much that's new conceptually in this PyTorch code; we're\ndefining the layer as a stackable module, which provides torch what it\nneeds to calculate both the forward and backward pass of an arbitrary\nnumber of layers.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# From https://github.com/e-hulten/planar-flows/blob/master/planar_transform.py\n\nclass PlanarTransform(nn.Module):\n  \"\"\"Implementation of the invertible transformation used in planar flow:\n      f(z) = z + u * h(dot(w.T, z) + b)\n  See Section 4.1 in https://arxiv.org/pdf/1505.05770.pdf. \n  \"\"\"\n\n  def __init__(self, dim: int = 2):\n      \"\"\"Initialise weights and bias.\n      \n      Args:\n          dim: Dimensionality of the distribution to be estimated.\n      \"\"\"\n      super().__init__()\n      self.w = nn.Parameter(torch.randn(1, dim).normal_(0, 0.1))\n      self.b = nn.Parameter(torch.randn(1).normal_(0, 0.1))\n      self.u = nn.Parameter(torch.randn(1, dim).normal_(0, 0.1))\n\n  def forward(self, z: Tensor) -> Tensor:\n      if torch.mm(self.u, self.w.T) < -1:\n          self.get_u_hat()\n\n      return z + self.u * nn.Tanh()(torch.mm(z, self.w.T) + self.b)\n\n  def log_det_J(self, z: Tensor) -> Tensor:\n      if torch.mm(self.u, self.w.T) < -1:\n          self.get_u_hat()\n      a = torch.mm(z, self.w.T) + self.b\n      psi = (1 - nn.Tanh()(a) ** 2) * self.w\n      abs_det = (1 + torch.mm(self.u, psi.T)).abs()\n      log_det = torch.log(1e-4 + abs_det)\n\n      return log_det\n\n  def get_u_hat(self) -> None:\n      \"\"\"Enforce w^T u >= -1. When using h(.) = tanh(.), this is a sufficient condition \n      for invertibility of the transformation f(z). See Appendix A.1.\n      \"\"\"\n      wtu = torch.mm(self.u, self.w.T)\n      m_wtu = -1 + torch.log(1 + torch.exp(wtu))\n      self.u.data = (\n          self.u + (m_wtu - wtu) * self.w / torch.norm(self.w, p=2, dim=1) ** 2\n      )\n```\n:::\n\n\nWhere things will start to get exciting is multiple layers of the flow; here's\nhow we can make an abstraction that allows us to stack up $K$ layers\nof the flow to control the flexibility of our approximation.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nclass PlanarFlow(nn.Module):\n    def __init__(self, dim: int = 2, K: int = 6):\n        \"\"\"Make a planar flow by stacking planar transformations in sequence.\n\n        Args:\n            dim: Dimensionality of the distribution to be estimated.\n            K: Number of transformations in the flow. \n        \"\"\"\n        super().__init__()\n        self.layers = [PlanarTransform(dim) for _ in range(K)]\n        self.model = nn.Sequential(*self.layers)\n\n    def forward(self, z: Tensor) -> Tuple[Tensor, float]:\n        log_det_J = 0\n\n        for layer in self.layers:\n            log_det_J += layer.log_det_J(z)\n            z = layer(z)\n\n        return z, log_det_J\n```\n:::\n\n\nLet's run this for a single layer to introduce the training loop, and build some\nintuition on the planar flow. \n\nThe hyperparameter names here should be fairly intuitive, but it's worth pointing\nout that the batch size, learning rate (`lr`), and choice of Adam as an optimizer are\nall pretty basic reasonable first tries, but something you'd want to consider tuning\nin a more complicated context- we inherit that level of fiddly-ness when we choose\nto approach VI using normalizing flows. Also, note that I'm hiding setting up the plot code\nsince it doesn't add anything to the intuition here.\n\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n#From https://github.com/e-hulten/planar-flows/blob/master/train.py\ntarget_distr = \"ring\"  # U_1, U_2, U_3, U_4, ring\nflow_length = 1\ndim = 2\nnum_batches = 20000\nbatch_size = 128\nlr = 6e-4\naxlim = xlim = ylim = 7  # 5 for U_1 to U_4, 7 for ring\n# ------------------------------------\n\ndensity = TargetDistribution(target_distr)\nmodel = PlanarFlow(dim, K=flow_length)\nbound = VariationalLoss(density)\noptimiser = torch.optim.Adam(model.parameters(), lr=lr)\n\n# Train model.\nfor batch_num in range(1, num_batches + 1):\n    # Get batch from N(0,I).\n    batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)\n    # Pass batch through flow.\n    zk, log_jacobians = model(batch)\n    \n    # Compute loss under target distribution.\n    loss = bound(batch, zk, log_jacobians)\n\n    optimiser.zero_grad()\n    loss.backward()\n    optimiser.step()\n\n    if batch_num % 100 == 0:\n        print(f\"(batch_num {batch_num:05d}/{num_batches}) loss: {loss}\")\n        \n\n    if batch_num == 1 or batch_num % 100 == 0:\n        # Save plots during training. Plots are saved to the 'train_plots' folder.\n        plot_training(model, flow_length, batch_num, lr, axlim)\n```\n:::\n\n\nAt each iteration, we pass the normal draws thorugh the flow, calculate the loss,\nand propagate that loss backward through the flow to train it using gradient\ndescent.\n\nHere's a gif[^6] of what that looks like over the course of training. With just a single\nlayer of planar flow of course, this isn't expressive enough to capture the full density, but we can see why\nthis approach has some promise- it's learning to cover the target density, rather\nthan us having to get creative in specifying a base density that does this.\n\n![](images/1_layer.gif){fig-alt=\"Maximally engineered two biomodal\"}\n\nLet's try a more serious attempt, with a depth of 32:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n#From https://github.com/e-hulten/planar-flows/blob/master/train.py\ntarget_distr = \"ring\"  # U_1, U_2, U_3, U_4, ring\nflow_length = 32\ndim = 2\nnum_batches = 20000\nbatch_size = 128\nlr = 6e-4\naxlim = xlim = ylim = 7  # 5 for U_1 to U_4, 7 for ring\n# ------------------------------------\n\ndensity = TargetDistribution(target_distr)\nmodel = PlanarFlow(dim, K=flow_length)\nbound = VariationalLoss(density)\noptimiser = torch.optim.Adam(model.parameters(), lr=lr)\n\n# Train model.\nfor batch_num in range(1, num_batches + 1):\n    # Get batch from N(0,I).\n    batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)\n    # Pass batch through flow.\n    zk, log_jacobians = model(batch)\n    \n    # Compute loss under target distribution.\n    loss = bound(batch, zk, log_jacobians)\n\n    optimiser.zero_grad()\n    loss.backward()\n    optimiser.step()\n\n    if batch_num % 100 == 0:\n        print(f\"(batch_num {batch_num:05d}/{num_batches}) loss: {loss}\")\n        #print(log_jacobians)\n\n    if batch_num == 1 or batch_num % 100 == 0:\n        # Save plots during training. Plots are saved to the 'train_plots' folder.\n        plot_training(model, flow_length, batch_num, lr, axlim)\n```\n:::\n\n\n![](images/32_layer.gif){fig-alt=\"An actually useful normalizing flow\"}\n\nNow we've got it! With this planar flow, we've transformed our base normal\ninto a pretty complex (for 2-D) distribution, cool!\n\nThis took about 20 minutes to train, so this is adding some considerable time\nto our VI workflow, but on the other hand, we're not spending the human time\nneeded to figure out what weird base density could be fitted to look like this, which\nis a win. Also worth pointing out here is that we started with a simple example\nfor illustration purposes, so if we did have something much more complicated\nor high dimensional to fit, we'd start to see the scalability of normalizing\nflows start to shine more.\n\nPlanar flows are a great learning tool, but in reality they aren't a great\nchoice once we get outside relatively low-dimensional examples. See [Kong and Chadhuri, (2020)](https://arxiv.org/abs/2006.00392) if you want more mathematical rigor, but intuitively,\nexpansion or compression around a hyperplane doesn't scale to high dimensions well\ngiven the operation is pretty simple. We can get around this partially by\nmaking the flow deeper, but that introduces its own problems, namely that very deep\nflows can struggle to fit given the somewhat artificial constraints imposed in computing the log determinant of the Jacobian (implemented in `get_u_hat` above) to ensure invertability. Finally,\nthere are flows developed since the original normalizing flows paper\nthat both are more expressive and have cheaper to compute transformations\nand log determinants of the Jacobian- let's turn to those now.\n\n# What more complicated Flows look like\n\nMore complex flows are an active area of research, and I won't attempt to talk\nthrough the whole zoo- I'd recommend either Lilian Weng's [blog post](https://lilianweng.github.io/posts/2018-10-13-flow-models/), or [Kobyzev et\nal. (2020)](https://arxiv.org/abs/1908.09257) as good starting points for seeing\nthe full range of available flows.\n\nInstead, I'll introduce just a single more complex flow, RealNVP, introduced in\n[Dinh et al. (2017)](https://arxiv.org/abs/1605.08803). This is a good example\nboth because the flow is shown to be robustly good for high dimensional variational inference tasks\nin review papers like [Dhaka et al. (2021)](https://arxiv.org/abs/2103.01085) and [Agrawal et al. (2020)](https://arxiv.org/abs/2006.10343), and because it illustrates some generalizable\nideas about flow design.\n\nDinh et al. start the RealNVP paper by noting some goals: they want a Jacobian\nthat is *triangular*, because this makes computing the determinant incredibly cheap (it's just\nthe product of the diagonal terms). Second, they want a transformation that's\nsimple to invert, but complex via inducing interdependencies between different\nparts of the data.\n\nTo do both of these at once, the key insight the authors come to is the idea\nof a *coupling layer*, where if the layer is $D$-dimensional, the first half of the dimensions $1:d$\nremain unchanged, and $d+1:D$ are transformed as complex function of the first half:\n\n$$\n\\begin{align}\ny_{1:d} &= x_{1:d}\\\\\ny_{d+1:D} &= x_{1:d} \\odot exp(s(x_{1:d})) + t(x_{1:d})\n\\end{align}\n$$\n\nWhere s and t are scaling and transformation functions from $\\mathbb{R}^d \\rightarrow \\mathbb{R}^{D-d}$,\nand $\\odot$ is the Hadamard (element-wise) product. Visually, at each layer:\n\n![Figure credit due to [Eric Jang](https://blog.evjang.com/2018/01/nf2.html); he uses the notation $\\alpha$ and $\\mu$ instead of $s$ and $t$](images/real_nvp_illustration.png){fig-alt=\"transforming half of the dimensions as a function of the other half\"}\n\nThis has a lot of really appealing properties. First, this has a triangular Jacobian:\n\n$$\n\\frac{\\partial y}{\\partial x^T}=\\left[\\begin{array}{cc}\\mathbb{I}_d & 0 \\\\ \\frac{\\partial y_{d+1: D}}{\\partial x_{1: d}^T} & \\operatorname{diag}\\left(\\exp \\left[s\\left(x_{1: d}\\right)\\right]\\right)\\end{array}\\right]\n$$\n\nwhich means that we can really efficiently compute the determinant as $\\exp \\left[\\sum_j s\\left(x_{1: d}\\right)_j\\right]$. For a sense of scale, with no specific structure to exploit,\ncalculating the determinant is roughly $\\mathcal{O}(n^3)$ or a little better[^7],\nbut for triangular matrices the same operation takes just $\\mathcal{O}(n)$; that's\na massive speedup!\n\nAnother nice characteristic here is that we don't need to compute the Jacobian\nof $s$ or $t$ in computing the determinant of the above Jacobian, so $s$ and $t$\nare much easier to make quite complex. Contrast this with the planar flow, where\nwe needed to use a specific (tanh) non-linearity, and impose somewhat arbitrary\nconstraints to ensure invertability at all, let alone easy, fast invertability. With\na realNVP flow constructed out of many such coupling layers, it's easy to throw\nin a lot of improvements that make training large neural networks much more reliable,\nlike batch normalization, weight normalization, and architectures like residual\nconnections.\n\nAs a last appealing property here, realize this can be really expressive: by varying at each\nlayer which dimensions $d$ are held constant and which are transformed, we can\nbuild up quite complex interrelationships between different dimensions over the flow. This\ncan be done simply at random, or perhaps even using structure of the problem to\ndecide how to partition the dimensions. For example, Dinh et al. provide an\nexample on image data where a checkerboard pattern is used to structure the partitions. Kingma and Dhariwal take this further with [Glow (2018)](https://arxiv.org/abs/1807.03039), a flow using 1x1 convolutions. Again, it's really nice we don't need the Jacobian of $s$ and $t$; they can have arbitrarily complex structure and we\ndon't need pay the computational cost of computing their Jacobians.\n\nIt doesn't add that much intuition to see another flow in code, so I'll hold\noff on showing off the implementation of RealNVP for another post or two when\nI return to fitting our MRP model better using all the tools we've built up.\n\nLike I said at the start of this section, there are tons and tons of possible flow\nstructures that get more computationally complex in exchange for expressiveness. RealNVP\nis a great start though, and for many variational inference problems provides\nthe amount of expressiveness we need. It also\nillustrates a lot of the core strategy for building further flow structure well:\n\n1. Make the log determinant of the Jacobian fast to calculate.\n2. Impose structure such that calculating the log determinant of the Jacobian\nisn't entangled with your source of learnable complexity; this allows expressiveness\nnot fitting restrictions to guide what's implemented.\n3. Leverage tools for scalable, stable neural networks, from batch norm to\narchitecture choices like residual connections to GPU compute.\n\n# Conclusion \n\nLet's take stock of how normalizing flows continue our project of extending vanilla variational inference.\nNormalizing flows allow us to learn the variational family rather than iterating\nthrough a bunch of base densities by hand until one works, and can do so for much\nmore complex posteriors than any of the simple choices like a mean-field or\nfull-rank gaussian we've seen so far. This is both a gain of functionality (we\ncan now fit posteriors with VI that we absolutely couldn't before),\nand a gain of convenience (the workflow for \"make my neural network expressive\" is much, much\nmore convenient than the one where the analyst tries to find or make increasingly weird distributions themselves).\n\nOf course, this adds compute time, and a requirement to start understanding neural network\nimplementation choices reasonably well. This isn't a free lunch- even the simple planar flow\non a toy example above took about 20 minutes to fit on my laptop, and having to\nunderstand neural nets well to fit a Bayesian model feels kind of silly. Still though,\nin the telling of review papers like [Dhaka et al. (2021)](https://arxiv.org/abs/2103.01085) and [Agrawal et al. (2020)](https://arxiv.org/abs/2006.10343), a basic RealNVP flow is a serious\nimprovement for many complex posterior distributions at fairly palatable run times.\nThis is a pretty good tradeoff for many realistic models, and it's for that reason that normalizing\nflows are an increasingly popular part of the variational inference toolbox.\n\nLike with alternative optimization objectives or the various uses of (Pareto smoothed)\nimportance sampling from the last post, normalizing flows give us tools to\nfit a wider range of models with variational inference, and do so more robustly\nand conveniently. This can come with it's own problems, but these trades are\noften worth it. In the next post, we'll add a final set of tools to our VI\ntoolbox: robust diagnostics to know if our approximation is good or not.\n\nThanks for reading. The code for this post can be found [here](https://github.com/andytimm/andytimm.github.io/blob/main/posts/Variational%20MRP%20Pt5/variational_mrp_pt5.qmd).\n\n[^1]: It also almost has a bit of \"no brain no pain\" ML guy energy, in the sense\nthat we're really pulling out the biggest algorithm possible. It really is a funny\ntrajectory to me to go from \"I'd like to still be Bayesian, but avoid MCMC because it's slow\"\nto \"screw subtle design, let's throw a NN at it\".\n[^2]: This is mostly a joke, but it really is a tremendous convenience that\nthere's such a straight forward knob to turn for \"expressivity\" in this context.\nWe'll get into the ways that isn't completely true soon, but NNs provide fantastic\nconvenience in terms of workflow for improving model flexibility.\n[^3]: You can see it in the original Normalizing Flows paper linked above, or\ncombined with a nice matrix calc review by [Lilian Weng](https://lilianweng.github.io/posts/2018-10-13-flow-models/). As a more general note, since this is a common topic on a few different talented\npeople's blogs, I'll try to focus on covering material I think I can provide\nmore intuition for, or that are most relevant for variational inference.\n[^4]: A great example of this is Lilian Weng's [NF walkthrough](https://lilianweng.github.io/posts/2018-10-13-flow-models/) which\nI recommended above- It\nhas a fantastic review of the needed linear algebra and covers a lot of different\nflow types, but is a bit overly general about what properties are most desirable\nin a flow, and is therefore initially a bit fuzzy on the value different flows\nhave.\n[^5]: Deriving precisely how this works would take us too far afield, but see [Kobyzev et\nal. (2020)](https://arxiv.org/abs/1908.09257) if you're interested. It's a great review paper that does a lot of work to recognize there are multiple different possible applications of normalizing flows, and thus\ndifferent notations and framings that they very successfully bridge.\n[^6]: Depending on your browser settings you may need to refresh the page here to watch it run.\n[^7]: Ok fine, you probably get that down to $\\mathcal{O}(n^{2.8...})$ using\n[Strassen](https://en.wikipedia.org/wiki/Strassen_algorithm) which is implemented\nessentially everywhere that matters.\n\n",
    "supporting": [
      "variational_mrp_pt5_files"
    ],
    "filters": [],
    "includes": {}
  }
}