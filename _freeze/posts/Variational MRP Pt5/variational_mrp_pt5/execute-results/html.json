{
  "hash": "22f64cb003b8715149ca030a3f30a588",
  "result": {
    "markdown": "---\nlayout: post\ntitle: Variational Inference for MRP with Reliable Posterior Distributions\nsubtitle: Part 5- Normalizing Flows\ndate: 2023-05-27\ndraft: True\ncategories:\n  - MRP\n  - Variational Inference\n  - Normalizing Flows\n---\n\nThis is section 5 in my series on using Variational Inference to speed up relatively complex Bayesian models like Multilevel Regression and Poststratification without the approximation being of disastrously poor quality. \n\nThe general structure for this post and the around it will be to describe a problem with VI, and then describe how that problem can be fixed to some degree. Collectively, all the small improvements in these four posts will go a long way towards more robust variational inference. I'll also have a grab bag at the end of other interesting ideas from the literature I think are cool, but maybe not as important or interesting to me as the 3 below.\n\nIn the [last post](https://andytimm.github.io/posts/Variational%20MRP%20Pt4/variational_mrp_4.html) we saw a variety of different ways importance sampling can be used to improve VI and make it more robust, from defining a tighter bound to optimize in the importance weighted ELBO, to weighting $q(x)$ samples together efficiently to look more like $p(x)$, to combining entirely different variational approximations together to cover different parts of the posterior with multiple importance sampling.\n\nIn this post, we'll tackle the problem of how to define a deeply flexible variational\nfamily $\\mathscr{Q}$ that can adapt to each problem while still being easy to sample from.\nTo do this, we'll draw on normalizing flows, a technique for defining a composition\nof invertible transformations on top of a simple base distribution like a normal\ndistribution. We'll build our way up to using increasingly complex neural networks\nto define those transformations, allowing for for truly complex variational\nfamilies that are problem adaptive, training as we train our variational model.\n\nThe rough plan for the series is as follows:\n\n1.  Introducing the Problem- Why is VI useful, why VI can produce spherical cows\n2.  How far does iteration on classic VI algorithms like mean-field and full-rank get us?\n3.  Problem 1: KL-D prefers exclusive solutions; are there alternatives?\n4.  Problem 2: Not all VI samples are of equal utility; can we weight them cleverly?\n5.  **(This post)** Problem 3: How can we get deeply flexible variational approximations; are Normalizing Flows the answer?\n6. Problem 4: How can we know when VI is wrong? Are there useful error bounds?\n7. Better grounded diagnostics and workflow\n\n# A problem adaptive variational family with less tinkering?\n\n![](images/flows_stairs_meme.png){fig-alt=\"Something about NNs makes me meme more\"}\n\nJumping from mean-field or full-rank Gaussians and similar distributions\nto neural networks feels a little... dramatic[^1],  so I want to spend\nsome time justifying why this is a good idea.\n\nFor VI to work well, we need something that's still simple to sample from, but capable\nof, in aggregate, representing a posterior that is probably pretty complex. Certainly,\nsome problems are amenable to the simple variational families $\\mathscr{Q}$ we've tried so far,\nbut it's worth re-emphasizing that we're probably trying to represent something complex,\nand even moderate success at that using a composition of normals should be\na little surprising, not the expected outcome.\n\nIf we need $\\mathscr{Q}$ to be more complex, aren't there choices between what\nwe've seen and a neural network? There's a whole literature of them- from using\nmixture distributions as variational distributions to inducing some additional\nstructure into a mean-field type solution if you have some specific knowledge\nabout your target posterior you can use. By and large though, this type of\nclass of solutions has been surpassed by normalizing flows in much of modern\nuse for more complex posteriors.\n\nWhy? A first reason is described in the paper that started the normalizing flows\nfor VI literature, Rezende and Mohamed's [**Variational Inference with Normalizing Flows\n**](https://arxiv.org/pdf/1505.05770.pdf): making our base variational distribution\nmore complex adds a variety of different computational costs, which add up quickly.\nThis isn't the most face-valid argument when I'm claiming a neural network\nis a good alternative, but it gets more plausible when you think through\nhow poorly it'd scale to keep making your mixture distribution more and more\ncomplex as your posteriors get harder to handle. So this is a *scalability*\nargument- it might sound extreme to bring in a neural net, but as problems\nget bigger, scaling matters.\n\nThe other point I'd raise is that all these other tools aren't very black box at\nall- if we can make things work with a problem-adapted version of mean-field with\nsome structure based on the knowledge of a specific problem we have, that sounds\nlike it gets time consuming fast. If I'm going to have\nto find a particular, problem-specific solution each time I want to use variational\ninference, that feels fragile and fiddly as well- that's a poor user experience.\n\nThe novel idea with normalizing flows is that we'll start with a simple base\ndensity like a normal distribution that is easy to sample from, but instead of only optimizing the parameters\nof that normal distribution, we'll also use the training on our ELBO or\nother objective to learn a transformation that reshapes that normal distribution to\nlook like our posterior. By having that transforming component be partially\ncomposed of a neural network,\nwe give ourselves access to an incredibly expressive, automatically problem adaptive,\nand heavily scalable variant of variational inference that is quite\nwidely used.\n\nAnd if the approximation isn't expressive enough? Deep Learning researchers have\nan unfussy, general purpose innovation for that: MORE LAYERS![^2]\n\n![](images/more_layers.png){fig-alt=\"Wow such estimator, very deep\"}\n\n# What is a normalizing flow?\n\nA normalizing flow transforms a simple base density into a complex one through\na sequence of invertible transformations. By stacking more and more of these\ninvertible transformations (having the density \"flow\" through them), we can create\narbitrarily complex distributions that remain valid probability distributions. Since\nit isn't universal in the flows literature, let me be explicit that I'll consider\n\"forward\" to be the direction flowing from the base density to the posterior, and\nthe \"backward\" or \"normalizing\" direction as towards the base density.\n\n![Image Credit to [Simon Boehm](https://siboehm.com/articles/19/normalizing-flow-network) here](images/normalizing-flow.png)\n\nIf we have a random variable $x$, with distribution $q(x)$, some function $f$ with an inverse\n$f^{-1} = g, g \\circ f(x) = x$, then the distribution of the result of\none iteration of x through, $q^\\prime(x)$ is:\n\n\n$$\nq\\prime(z) = q(x) \\lvert det \\frac{\\partial f^{-1}}{\\partial x^\\prime} \\rvert = q(x) \\lvert \\frac{\\partial f}{\\partial x} \\rvert^{-1}\n$$\n\nI won't derive this identity[^3], but it follows from the chain rule and the\n properties of Jacobians of invertible functions.\n\nThe real power comes in here when we see that these transformations stack. If\nwe've got a chain of transformations (eg $f_K(...(f_2f_1(x))$:\n\n\n$$\nx_K = f(x) \\circ ... \\circ f_2 \\circ f_1(x_0)\n$$\n\n\nthen the resulting density $q_K(x)$ looks like:\n\n\n$$\nln q_K (x_K) = lnq_0(x_0) - \\sum \\limits_{K = 1}\\limits^{K} ln  \\lvert \\frac{\\partial f_k}{\\partial x_{k-1}} \\rvert^{-1}\n$$\n\n\nNeat, and surprisingly simple! If the terms above are all easy to calculate,\nwe can very efficiently stack a bunch of these transformations and make\nan expressive model.\n\n## Normalizing Flows for variational inference versus other applications\n\nOne source of confusion when I was learning about normalizing flows for\nvariational inference was that variational inference makes up a fairly\nsmall proportion of the use cases for normalizing flows, and thus the academic\nliterature and online discussion. More common applications include density estimation, image generation,\nrepresentation learning, and reinforcement learning. In addition to making specifically applicable\ndiscussions harder to find, often resources will make strong claims about properties of a given\nflow structure, that really only holding in some subset of the above applications[^4].\n\nBy taking a second to explain this crisply and compare different application's needs,\nhopefully I can save you some confusion and make engaging with the broader literature easier.\n\nTo start, consider the relevant operations we've introduced so far:\n\n1. computing $f$, that is pushing a sample through the transformations\n2. computing $g$, $f$'s inverse which undoes the manipulations\n3. computing the (log) determinant of the Jacobian\n \n1 and 3 definitely need to be efficient for our use case, since we need to be\nable to sample and push through using the formula above efficiently to calculate\nan ELBO and train our model. 2 is where things get\nmore subtle: we definitely need $f$ to be invertible, since our formulas above\nare dependent on a property of Jacobians of invertible functions. But we don't\nactually really need to explicitly compute $g$ for variational inference. Even knowing the inverse\nexists but not having a formula might be fine for us!\n\nContrast\nthis with density estimation, where the goal would not to sample from the distribution,\nbut instead to estimate the density. In this case, most of the time would be\nspent going in the opposite direction, so that they can evaluate the log-likliehood\nof the data, and maximize it to improve the model[^5]. The need for an expressive\ntransformation of densities unite these two cases, but the goal is quite different!\n\nThis level of goal disagreement also shows it face in what direction papers\nchoose to call forward: Most papers outside of variational inference applications consider forward to be the opposite of what I do here, the direction towards\nthe base density, the \"normalizing\" direction. \n\nFor our use, hopefully this short digression has clarified which operations we need to be\nfast versus just exist. If you dive deeper into\nfurther work on normalizing flows, hopefully recognizing there are two\ndifferent ways to point this thing helps you more quickly orient yourself\nto how other work describe flows.\n\n# How to train your neural net\n\nNow, let's turn to how we actually fit a normalizing flow. Since this would be a bit\nhard to grok a code presentation if I took advantage of the full flexibility and abstraction that\nsomething like [`vistan`](https://github.com/abhiagwl/vistan/tree/master) provides, before\nheading into general purpose tools I'll talk through a bit more explicit implementation\nof a simpler flow called a planar flow `PyTorch` for illustration. Rather than\nreinventing the wheel, I'll leverage Edvard Hulten's implementation [here](https://github.com/e-hulten/planar-flows).\n\nIn this section,\nI'll define conceptually how we're fitting the model, and build out a fun\ntarget distribution and loss`- since I expect many people reading\nthis may moderately new to PyTorch, I'll explain in detail\nthan normal what each operation is doing and why we need it.\n\n\n\nLet's first make a fun target posterior distribution from an image to model. I\nthink it'd be a fun preview gif for the post to watch the model say Hi:\n\n![](images/hard_to_draw_posterior.png){fig-alt=\"Wow such estimator, very deep\"}\n\nIt's quick to turn the 300x300 pixel image above into a 300x300 PyTorch tensor.\nTo represent this as a 2-D density we can fit models against, we'll read in\nthe image, collapse along the color dimension, and transform it into a torch\ntensor:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nraw_img = Image.open(\"images/hard_to_draw_posterior.png\")\n\n# Sum the 3 color channels\ngreyscale_img = np.array(raw_img).sum(axis = 2)\n\n# Normalize values to help with fitting\nnormalized_image  = (greyscale_img - greyscale_img.min()) / (greyscale_img.max() - greyscale_img.min())\n \n# Make a torch tensor of the target to use\ntorch_posterior = torch.from_numpy(normalized_image)\n\ntorch_posterior.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\ntorch.Size([300, 300])\n```\n:::\n:::\n\n\nNow let's define our loss for training, which will just be a slight\nreformulation of our ELBO:\n\n\n$$\n \\mathbb{E}[logp(z,x)] - \\mathbb{E}[logq(z)]\n$$\n\n\nTo do this, we'll define a class for the loss.\n\nFirst, we pick a simple base distribution to push through our flow, here a \n2-D Normal distribution called `base_distr`. We'll also include the interesting\ntarget we just made above, `distr`.\n\nNext, the forward pass structure. The `forward` method is the is the core of the computational graph structure in PyTorch. It defines operations that are applied to the input tensors to compute the output, and \ngives PyTorch the needed information for automatic differentiation, which allows smooth calculation\nand backpropogation of loss through the model to train it. This `VariationalLoss`\nmodule will run at the end of the forward pass to calculate the loss and allow us\nto pass it back through the graph for training.\n\nKeeping with the structure above of numbering successive stages of the flow,\n`z0` here is our base distribution, and `z` will be the learned approximation\nto the target. In addition to the terms you'd expect in the ELBO, we're also\ntracking and making use of the sum of the log determinant of the Jacobians to\na handle on the distortion of the base density the flows apply.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# https://github.com/e-hulten/planar-flows/blob/master/loss.py\nclass VariationalLoss(nn.Module):\n  def __init__(self,distribution):\n      super().__init__()\n      self.distr = distribution\n      self.base_distr = MultivariateNormal(torch.zeros(2), torch.eye(2))\n\n  def forward(self, z0: Tensor, z: Tensor, sum_log_det_J: float) -> float:\n      base_log_prob = self.base_distr.log_prob(z0)\n      target_density_log_prob = -self.distr(z)\n      return (base_log_prob - target_density_log_prob - sum_log_det_J).mean()\n```\n:::\n\n\n# A basic flow\n\nNext, let's define the structure of the actual flow. To do this, we'll first\ndescribe a single layer of the flow, then we'll show structure to stack\nthe flow in layers.\n\n\n\n# What more complicated NNs look like\n\n# Conclusion \n\n[^1]: It also almost has a bit of \"no brain no pain\" ML guy energy, in the sense\nthat we're really pulling out the biggest algorithm possible. It really is a funny\ntrajectory to me to go from \"I'd like to still be Bayesian, but avoid MCMC because it's slow\"\nto \"screw subtle design, let's throw a NN at it\".\n[^2]: This is mostly a joke, but it really is a tremendous convenience that\nthere's such a straight forward knob to turn for \"expressivity\" in this context.\nWe'll get into the ways that isn't completely true soon, but NNs provide fantastic\nconvenience in terms of workflow for improving model flexibility.\n[^3]: You can see it in the original Normalizing Flows paper linked above, or\ncombined with a nice matrix calc review by [Lilian Weng](https://lilianweng.github.io/posts/2018-10-13-flow-models/). As a more general note, since this is a common topic on a few different talented\npeople's blogs, I'll try to focus on covering material I think I can provide\nmore intuition for, or that are most relevant for variational inference.\n[^4]: A great example of this is Lilian Weng's [NF walkthrough](https://lilianweng.github.io/posts/2018-10-13-flow-models/) which\nI reccomended above- It\nhas a fantastic review of the needed linear algebra and covers a lot of different\nflow types, but is a bit overly general about what properties are most desirable\nin a flow, and therefore initially a bit fuzzy on the value different flows\nhave.\n[^5]: Deriving precisely how this works would take us too far afield, but see [Kobyzev et\nal. (2020)](https://arxiv.org/abs/1908.09257) if you're interested. It's a great review paper that does a lot of work to recognize there are multiple different possible applications of normalizing flows, and thus\ndifferent notations and framings that they very successfully bridge.\nare many different implicit and explicit objectives and \n\n",
    "supporting": [
      "variational_mrp_pt5_files"
    ],
    "filters": [],
    "includes": {}
  }
}