group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "mcmc")
mfvi_white_low_ed <- mfvi_state_level %>%
filter(eth == "White", educ %in% c("HS", "No HS")) %>%
# multiply each draw by it's cell's proportion of state N
# this is the P in MRP
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "mcmc")
combined_points_white_low_ed <- mcmc_white_low_ed %>%
bind_rows(mfvi_white_low_ed) %>%
ungroup()
combined_points_white_low_ed %>%
mutate(ordered_state = fct_reorder(combined_points_white_low_ed$state,
combined_points_white_low_ed$postrat_draw)) %>%
ggplot(aes(y = ordered_state,
x = postrat_draw,
color = model)) +
stat_dots(quantiles = 100) +
facet_wrap(~model) +
theme(legend.position="none")
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "MF-VI")
mcmc_white_low_ed <- mcmc_state_level %>%
#
filter(eth == "White", educ %in% c("HS", "No HS")) %>%
# multiply each draw by it's cell's proportion of state N
# this is the P in MRP
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "mcmc")
mfvi_white_low_ed <- mfvi_state_level %>%
filter(eth == "White", educ %in% c("HS", "No HS")) %>%
# multiply each draw by it's cell's proportion of state N
# this is the P in MRP
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "mcmc")
combined_points_white_low_ed <- mcmc_white_low_ed %>%
bind_rows(mfvi_white_low_ed) %>%
ungroup()
combined_points_white_low_ed %>%
mutate(ordered_state = fct_reorder(combined_points_white_low_ed$state,
combined_points_white_low_ed$postrat_draw)) %>%
ggplot(aes(y = ordered_state,
x = postrat_draw,
color = model)) +
stat_dots(quantiles = 100) +
facet_wrap(~model) +
theme(legend.position="none")
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "MF-VI")
mcmc_white_low_ed <- mcmc_state_level %>%
#
filter(eth == "White", educ %in% c("HS", "No HS")) %>%
# multiply each draw by it's cell's proportion of state N
# this is the P in MRP
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "mcmc")
mfvi_white_low_ed <- mfvi_state_level %>%
filter(eth == "White", educ %in% c("HS", "No HS")) %>%
# multiply each draw by it's cell's proportion of state N
# this is the P in MRP
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "mcmc")
combined_points_white_low_ed <- mcmc_white_low_ed %>%
bind_rows(mfvi_white_low_ed) %>%
ungroup()
combined_points_white_low_ed %>%
mutate(ordered_state = fct_reorder(combined_points_white_low_ed$state,
combined_points_white_low_ed$postrat_draw)) %>%
ggplot(aes(y = ordered_state,
x = postrat_draw,
color = model)) +
stat_dots(quantiles = 100) +
facet_wrap(~model) +
theme(legend.position="none")
mcmc_white_low_ed <- mcmc_state_level %>%
#
filter(eth == "White", educ %in% c("HS", "No HS")) %>%
# multiply each draw by it's cell's proportion of state N
# this is the P in MRP
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "mcmc")
mfvi_white_low_ed <- mfvi_state_level %>%
filter(eth == "White", educ %in% c("HS", "No HS")) %>%
# multiply each draw by it's cell's proportion of state N
# this is the P in MRP
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "MF-VI")
combined_points_white_low_ed <- mcmc_white_low_ed %>%
bind_rows(mfvi_white_low_ed) %>%
ungroup()
combined_points_white_low_ed %>%
mutate(ordered_state = fct_reorder(combined_points_white_low_ed$state,
combined_points_white_low_ed$postrat_draw)) %>%
ggplot(aes(y = ordered_state,
x = postrat_draw,
color = model)) +
stat_dots(quantiles = 100) +
facet_wrap(~model) +
theme(legend.position="none")
summary(mcmc_60k)
test <- summary(mcmc_60k)
test
test[1,1]
test[1,]
test[,1]
cor(test[,1],summary(meanfield_60k)[,1])
summary(meanfield_60k)[,1]
test2 <- summary(meanfield_60k)
test[,1]
test[1:129,1]
cor(test[1:129,1],test2[1:129,1]
)
cor(test[1:129,2],test2[1:129,2])
test[1:129,2]
test
test2[2,]
test1[2,]
test[2,]
cor(test[1:129,3],test2[1:129,3])
library(tidyverse)
library(rstanarm)
library(tidybayes)
library(tictoc)
options(dplyr.summarise.inform = FALSE)
# As noted in the text of the first post, I'm starting from and working off of
# the wonderful example developed in MRP Case Studies book
# (https://bookdown.org/jl5522/MRP-case-studies/introduction-to-mrp.html)
set.seed(605)
options(mc.cores = parallel::detectCores(logical = FALSE))
# The US census and CCES data use FIPS codes to identify states. For better
# interpretability, we label these FIPS codes with their corresponding abbreviation.
# Note that the FIPS codes include the district of Columbia and US territories which
# are not considered in this study, creating some gaps in the numbering system.
state_abb <- datasets::state.abb
state_fips <- c(1,2,4,5,6,8,9,10,12,13,15,16,17,18,19,20,21,22,23,24,
25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,
44,45,46,47,48,49,50,51,53,54,55,56)
recode_fips <- function(column) {
factor(column, levels = state_fips, labels = state_abb)
}
cces_all_df <- read_csv("data/cces18_common_vv.csv.gz")
clean_cces <- function(df, remove_nas = TRUE){
## Abortion -- dichotomous (0 - Oppose / 1 - Support)
df$abortion <- abs(df$CC18_321d-2)
## State -- factor
df$state <- recode_fips(df$inputstate)
## Gender -- dichotomous (coded as -0.5 Female, +0.5 Male)
df$male <- abs(df$gender-2)-0.5
## ethnicity -- factor
df$eth <- factor(df$race,
levels = 1:8,
labels = c("White", "Black", "Hispanic", "Asian", "Native American", "Mixed", "Other", "Middle Eastern"))
df$eth <- fct_collapse(df$eth, "Other" = c("Asian", "Other", "Middle Eastern", "Mixed", "Native American"))
## Age -- cut into factor
df$age <- 2018 - df$birthyr
df$age <- cut(as.integer(df$age), breaks = c(0, 29, 39, 49, 59, 69, 120),
labels = c("18-29","30-39","40-49","50-59","60-69","70+"),
ordered_result = TRUE)
## Education -- factor
df$educ <- factor(as.integer(df$educ),
levels = 1:6,
labels = c("No HS", "HS", "Some college", "Associates", "4-Year College", "Post-grad"), ordered = TRUE)
df$educ <- fct_collapse(df$educ, "Some college" = c("Some college", "Associates"))
# Filter out unnecessary columns and remove NAs
df <- df %>% select(abortion, state, eth, male, age, educ)
if (remove_nas){
df <- df %>% drop_na()
}
return(df)
}
cces_all_df_cleaned <-  clean_cces(cces_all_df, remove_nas = TRUE)
# Load data frame created in the appendix. The data frame that contains the poststratification
# table is called poststrat_df
poststrat_df <- read_csv("data/poststrat_df.csv")
statelevel_predictors_df <- read_csv('data/statelevel_predictors.csv')
poststrat_df_60k <- left_join(poststrat_df, statelevel_predictors_df, by = "state")
cces_all_df <- left_join(cces_all_df_cleaned, statelevel_predictors_df, by = "state")
meanfield_60k <- readRDS("fit_60k_meanfield.rds")
mcmc_60k <- readRDS("fit_60k_mcmc.rds")
# Meanfield
epred_mat_mf <- posterior_epred(meanfield_60k, newdata = poststrat_df_60k, draws = 1000)
mrp_estimates_vector_mf <- epred_mat_mf %*% poststrat_df_60k$n /
sum(poststrat_df_60k$n)
mrp_estimate_mf <- c(mean = mean(mrp_estimates_vector_mf),
sd = sd(mrp_estimates_vector_mf))
# MCMC
epred_mat_mcmc <- posterior_epred(mcmc_60k, newdata = poststrat_df_60k, draws = 1000)
mrp_estimates_vector_mcmc <- epred_mat_mcmc %*% poststrat_df_60k$n /
sum(poststrat_df_60k$n)
mrp_estimate_mcmc <- c(mean = mean(mrp_estimates_vector_mcmc),
sd = sd(mrp_estimates_vector_mcmc))
cat("Meanfield MRP estimate mean, sd: ", round(mrp_estimate_mf, 3))
cat("MCMC MRP estimate mean, sd: ", round(mrp_estimate_mcmc, 3))
mcmc_state_level <- poststrat_df_60k %>% add_epred_draws(mcmc_60k, ndraws = 1000)
mfvi_state_level <- poststrat_df_60k %>% add_epred_draws(meanfield_60k, ndraws = 1000)
mcmc_state_level %>% glimpse()
mcmc_state_summary <- mcmc_state_level %>%
# multiply each draw by it's cell's proportion of state N
# this is the P in MRP
group_by(state,.draw) %>%
mutate(postrat_draw = sum(.epred*(n/sum(n)))) %>%
group_by(state) %>%
median_qi(postrat_draw, .width = c(.5,.95)) %>%
mutate(model = "mcmc")
mfvi_state_summary <- mfvi_state_level %>%
group_by(state,.draw) %>%
mutate(postrat_draw = sum(.epred*(n/sum(n)))) %>%
group_by(state) %>%
median_qi(postrat_draw, .width = c(.5,.95)) %>%
mutate(model = "MF-VI")
combined_summary <- bind_rows(mcmc_state_summary,mfvi_state_summary)
combined_summary %>%
mutate(ordered_state = fct_reorder(combined_summary$state,
combined_summary$postrat_draw)) %>%
ggplot(aes(y = ordered_state,
x = postrat_draw,
xmin = .lower,
xmax = .upper,
color = model)) +
geom_pointinterval(position = position_dodge(1)) +
xlim(.25,.75) +
theme(legend.position="top")
mcmc_state_points <- mcmc_state_level %>%
# multiply each draw by it's cell's proportion of state N
# this is the P in MRP
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "mcmc")
mfvi_state_points <- mfvi_state_level %>%
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "MF-VI")
combined_points <- mcmc_state_points %>%
bind_rows(mfvi_state_points) %>%
ungroup()
combined_points %>%
mutate(ordered_state = fct_reorder(combined_points$state,
combined_points$postrat_draw)) %>%
ggplot(aes(y = ordered_state,
x = postrat_draw,
color = model)) +
stat_dots(quantiles = 100) +
facet_wrap(~model) +
theme(legend.position="none")
tic()
fit_60k_1e8 <- stan_glmer(abortion ~ (1 | state) + (1 | eth) + (1 | educ) +
male + (1 | male:eth) + (1 | educ:age) +
(1 | educ:eth) + repvote + factor(region),
family = binomial(link = "logit"),
data = cces_all_df,
prior = normal(0, 1, autoscale = TRUE),
prior_covariance = decov(scale = 0.50),
adapt_delta = 0.99,
# Printing the ELBO every 1k draws
refresh = 1000,
tol_rel_obj = 1e-8,
algorithm = "meanfield",
seed = 605)
toc()
lower_tol_draws <- poststrat_df_60k %>% add_epred_draws(fit_60k_1e8, ndraws = 1000)
mfvi_lower_tol_points <- lower_tol_draws %>%
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "MF-VI 1e-8")
combined_points_w_lower_tol <- combined_points %>%
bind_rows(mfvi_lower_tol_points) %>%
ungroup()
combined_points_w_lower_tol %>%
mutate(ordered_state = fct_reorder(combined_points_w_lower_tol$state,
combined_points_w_lower_tol$postrat_draw)) %>%
ggplot(aes(y = ordered_state,
x = postrat_draw,
color = model)) +
stat_dots(quantiles = 100) +
facet_wrap(~model) +
theme(legend.position="none")
tic()
fit_60k_fullrank <- stan_glmer(abortion ~ (1 | state) + (1 | eth) + (1 | educ) +
male + (1 | male:eth) + (1 | educ:age) +
(1 | educ:eth) + repvote + factor(region),
family = binomial(link = "logit"),
data = cces_all_df,
prior = normal(0, 1, autoscale = TRUE),
prior_covariance = decov(scale = 0.50),
adapt_delta = 0.99,
refresh = 0,
tol_rel_obj = 1e-8,
# Printing the ELBO every 1k draws
refresh = 1000,
algorithm = "fullrank",
QR = TRUE,
seed = 605)
toc()
full_rank_draws <- poststrat_df_60k %>% add_epred_draws(fit_60k_fullrank,
ndraws = 1000)
frvi_points <- full_rank_draws %>%
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "FR-VI")
combined_points_w_frvi <- combined_points_w_lower_tol %>%
bind_rows(frvi_points) %>%
ungroup()
combined_points_w_frvi %>%
mutate(ordered_state = fct_reorder(combined_points_w_frvi$state,
combined_points_w_frvi$postrat_draw)) %>%
ggplot(aes(y = ordered_state,
x = postrat_draw,
color = model)) +
stat_dots(quantiles = 100) +
facet_wrap(~model) +
theme(legend.position="none")
tic()
fit_60k_fullrank <- stan_glmer(abortion ~ (1 | state) + (1 | eth) + (1 | educ) +
male + (1 | male:eth) + (1 | educ:age) +
(1 | educ:eth) + repvote + factor(region),
family = binomial(link = "logit"),
data = cces_all_df,
prior = normal(0, 1, autoscale = TRUE),
prior_covariance = decov(scale = 0.50),
adapt_delta = 0.99,
tol_rel_obj = 1e-8,
# Printing the ELBO every 1k draws
refresh = 1000,
algorithm = "fullrank",
QR = TRUE,
seed = 605)
toc()
full_rank_draws <- poststrat_df_60k %>% add_epred_draws(fit_60k_fullrank,
ndraws = 1000)
frvi_points <- full_rank_draws %>%
group_by(state,.draw) %>%
summarize(postrat_draw = sum(.epred*(n/sum(n)))) %>%
mutate(model = "FR-VI")
combined_points_w_frvi <- combined_points_w_lower_tol %>%
bind_rows(frvi_points) %>%
ungroup()
combined_points_w_frvi %>%
mutate(ordered_state = fct_reorder(combined_points_w_frvi$state,
combined_points_w_frvi$postrat_draw)) %>%
ggplot(aes(y = ordered_state,
x = postrat_draw,
color = model)) +
stat_dots(quantiles = 100) +
facet_wrap(~model) +
theme(legend.position="none")
library(ggplot2)
library(tidyverse)
norm_1 <- rnorm(1000,3,1)
norm_2 <- rnorm(1000,6,2)
combined_mixture <- bind_rows(norm_1,norm_2)
combined_mixture <- bind_rows(norm_1,norm_2)
library(ggplot2)
library(tidyverse)
norm_1 <- rnorm(1000,3,1)
norm_2 <- rnorm(1000,6,2)
combined_mixture <- bind_rows(norm_1,norm_2)
combined_mixture <- c(norm_1,norm_2)
mixture <- data.frame(norm_a = c(rnorm(1000,3,1),rnorm(1000,6,2)))
mixture %>% ggplot(x = normals) + geom_density()
library(ggplot2)
library(tidyverse)
mixture <- data.frame(normals = c(rnorm(1000,3,1),rnorm(1000,6,2)))
mixture %>% ggplot(x = normals) + geom_density()
mixture %>% ggplot(aes(x = normals)) + geom_density()
mixture <- data.frame(normals = c(rnorm(1000,3,1),rnorm(1000,10,2)))
mixture %>% ggplot(aes(x = normals)) + geom_density()
mixture <- data.frame(normals = c(rnorm(1000,3,1),rnorm(1000,15,2)))
mixture %>% ggplot(aes(x = normals)) + geom_density()
mixture %>% ggplot(aes(x = normals)) + geom_density() + theme_minimal()
mixture %>% ggplot(aes(x = normals)) + geom_density() + theme_void()
mixture %>% ggplot(aes(x = normals)) + geom_density() + theme_bw()
library(ggplot2)
library(tidyverse)
mixture <- data.frame(normals = c(rnorm(1000,3,1),rnorm(1000,15,2)),
mode_seeking_kl = )
mixture <- data.frame(normals = c(rnorm(1000,3,1),rnorm(1000,15,2)),
mode_seeking_kl = rnorm(2000,3.5,2))
mixture %>% ggplot(aes(x = normals)) + geom_density(aes(x = normals), col = "red")
mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), col = "red") +
geom_density(aes(x = mode_seeking_kl, col = "green"))
mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mode_seeking_kl, color = "green"))
mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mode_seeking_kl), color = "green")
mixture <- data.frame(normals = c(rnorm(1000,3,1),rnorm(1000,15,2)),
mode_seeking_kl = rnorm(2000,3.5,2),
mode_seeking_kl = rnorm(2000,9,4))
mixture <- data.frame(normals = c(rnorm(1000,3,1),rnorm(1000,15,2)),
mode_seeking_kl = rnorm(2000,3.5,2),
mean_seeking_kl = rnorm(2000,9,4))
mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mean_seeking_mk), color = "cyan") + ggtitle("Reverse KL")
mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mean_seeking_kl), color = "cyan") + ggtitle("Reverse KL")
library(gridExtra)
grid.arrange(fkl_plot,rkl_plot)
fkl_plot <- mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mode_seeking_kl), color = "green") + ggtitle("Forward KL")
rkl_plot <- mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mean_seeking_kl), color = "cyan") + ggtitle("Reverse KL")
grid.arrange(fkl_plot,rkl_plot)
fkl_plot <- mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mode_seeking_kl), color = "green") + ggtitle("Forward KL") +
xlab("")
rkl_plot <- mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mean_seeking_kl), color = "cyan") + ggtitle("Reverse KL")
grid.arrange(fkl_plot,rkl_plot)
rkl_plot <- mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mean_seeking_kl), color = "cyan") + ggtitle("Reverse KL") +
xlab("")
grid.arrange(fkl_plot,rkl_plot)
library(ggplot2)
library(gridExtra)
library(tidyverse)
mixture <- data.frame(normals = c(rnorm(1000,3,1),rnorm(1000,15,2)),
mode_seeking_kl = rnorm(2000,3.5,2),
mean_seeking_kl = rnorm(2000,9,4))
rkl_plot <- mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mode_seeking_kl), color = "green") + ggtitle("Forward KL") +
xlab("")
fkl_plot <- mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mean_seeking_kl), color = "cyan") + ggtitle("Reverse KL") +
xlab("")
grid.arrange(rkl_plot,fkl_plot)
library(ggplot2)
library(gridExtra)
library(tidyverse)
mixture <- data.frame(normals = c(rnorm(1000,3,1),rnorm(1000,15,2)),
mode_seeking_kl = rnorm(2000,3.5,2),
mean_seeking_kl = rnorm(2000,9,4))
rkl_plot <- mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mode_seeking_kl), color = "green") + ggtitle("Exclusive KL") +
xlab("")
fkl_plot <- mixture %>% ggplot(aes(x = normals)) +
geom_density(aes(x = normals), color = "red") +
geom_density(aes(x = mean_seeking_kl), color = "green") + ggtitle("Inclusive KL") +
xlab("")
grid.arrange(rkl_plot,fkl_plot)
library(rstan)
# Define the model
model_code <- "
data {
int<lower=0> N;
real y[N];
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
y ~ normal(mu, sigma);
mu ~ normal(0, 10);
sigma ~ cauchy(0, 5);
}
generated quantities {
real log_lik;
log_lik = normal_lpdf(y | mu, sigma);
}
"
# Generate some data
set.seed(123)
N <- 100
y <- rnorm(N, mean = 2, sd = 1)
# Define the function we want to estimate the expectation of
g <- function(x) x[1] * x[2]
# Define the proposal distribution
proposal_density <- function(x) dnorm(x[1], mean = 2, sd = 1) * dcauchy(x[2], location = 0, scale = 5)
# Use SNIS to estimate the expectation of g with respect to the posterior distribution
proposal_samples <- mvrnorm(1000, c(2, 1), matrix(c(1, 0, 0, 1), ncol = 2))
library(MASS)
# Use SNIS to estimate the expectation of g with respect to the posterior distribution
proposal_samples <- mvrnorm(1000, c(2, 1), matrix(c(1, 0, 0, 1), ncol = 2))
weights <- apply(proposal_samples, 1, function(x) g(x) * exp(stan_log_lik(x, data = list(N = N, y = y))) / proposal_density(x))
weights <- apply(proposal_samples, 1, function(x) g(x) * exp(extract_log_lik(x, data = list(N = N, y = y))) / proposal_density(x))
library(brms)
weights <- apply(proposal_samples, 1, function(x) g(x) * exp(stan_log_lik(x, data = list(N = N, y = y))) / proposal_density(x))
?
?stan_log_lik
stan_log_lik <- function(theta, y, stan_data) {
# Merge the parameter values with the data and stan_data
stan_data <- c(list(theta = theta), stan_data, list(y = y))
# Compile and sample from the posterior distribution
fit <- sampling(stan_model, data = stan_data, algorithm = "Fixed_param",
iter = 1, chains = 1, refresh = 0, seed = 123)
# Extract the log posterior density and return it as the log-likelihood
log_lik <- fit[[1]]$lp__
return(log_lik)
}
weights <- apply(proposal_samples, 1, function(x) g(x) * exp(stan_log_lik(x, data = list(N = N, y = y))) / proposal_density(x))
