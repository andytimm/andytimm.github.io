ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density * 400
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).sum()
ring_density(batch).sum()
interpolate_tensor(torch_posterior,batch2).sum()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
batch = torch.zeros(size=(batch_size, 2)).normal_(mean=0, std=1)
batch2 = torch.zeros(size=(batch_size, 2)).normal_(mean=150, std=30)
def two_moons_density(z):
x = z[:, 0]
y = z[:, 1]
d = torch.sqrt(x**2 + y**2)
density = torch.exp(-0.2 * d) * torch.cos(4 * np.pi * d)
return density
def ring_density(z):
exp1 = torch.exp(-0.5 * ((z[:, 0] - 2) / 0.8) ** 2)
exp2 = torch.exp(-0.5 * ((z[:, 0] + 2) / 0.8) ** 2)
u = 0.5 * ((torch.norm(z, 2, dim=1) - 4) / 0.4) ** 2
u = u - torch.log(exp1 + exp2 + 1e-6)
return u
two_moons_density(batch).min()
ring_density(batch).min()
interpolate_tensor(torch_posterior,batch2).min()
